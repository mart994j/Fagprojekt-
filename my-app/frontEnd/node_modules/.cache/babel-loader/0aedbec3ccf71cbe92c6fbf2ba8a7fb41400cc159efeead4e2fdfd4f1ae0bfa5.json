{"ast":null,"code":"class SudokuGenerator {\n  constructor() {\n    this.grid = Array(9).fill().map(() => Array(9).fill(0));\n  }\n  generate() {\n    this.fillDiagonal();\n    this.fillRemaining(0, 3);\n    this.removeKDigits(20);\n    return this.grid;\n  }\n  fillDiagonal() {\n    for (let i = 0; i < 9; i = i + 3) this.fillBox(i, i);\n  }\n  unUsedInBox(rowStart, colStart, num) {\n    for (let i = 0; i < 3; i++) for (let j = 0; j < 3; j++) if (this.grid[rowStart + i][colStart + j] === num) return false;\n    return true;\n  }\n  fillBox(row, col) {\n    let num;\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        do {\n          num = this.randomGenerator(9);\n        } while (!this.unUsedInBox(row, col, num));\n        this.grid[row + i][col + j] = num;\n      }\n    }\n  }\n  randomGenerator(num) {\n    return Math.floor(Math.random() * num);\n  }\n  removeKDigits(K) {\n    let count = K;\n    while (count !== 0) {\n      let cellId = this.randomGenerator(81);\n      let i = Math.floor(cellId / 9),\n        j = cellId % 9;\n      if (this.grid[i][j] !== 0) {\n        count--;\n        this.grid[i][j] = 0;\n      }\n    }\n  }\n  CheckIfSafe(i, j, num) {\n    return this.unUsedInRow(i, num) && this.unUsedInCol(j, num) && this.unUsedInBox(i - i % 3, j - j % 3, num);\n  }\n  unUsedInRow(i, num) {\n    for (let j = 0; j < 9; j++) if (this.grid[i][j] === num) return false;\n    return true;\n  }\n  unUsedInCol(j, num) {\n    for (let i = 0; i < 9; i++) if (this.grid[i][j] === num) return false;\n    return true;\n  }\n  fillRemaining(i, j) {\n    if (j >= 9 && i < 8) {\n      i += 1;\n      j = 0;\n    }\n    if (i >= 9 && j >= 9) {\n      return true;\n    }\n    if (i < 3) {\n      if (j < 3) {\n        j = 3;\n      }\n    } else if (i < 6) {\n      if (j === parseInt(i / 3) * 3) {\n        j += 3;\n      }\n    } else {\n      if (j === 6) {\n        i += 1;\n        j = 0;\n        if (i >= 9) {\n          return true;\n        }\n      }\n    }\n    for (let num = 1; num <= 9; num++) {\n      if (this.CheckIfSafe(i, j, num)) {\n        this.grid[i][j] = num;\n        if (this.fillRemaining(i, j + 1)) {\n          return true;\n        }\n        this.grid[i][j] = 0; // Backtrack\n      }\n    }\n    return false; // Triggers backtracking\n  }\n}\nexport default SudokuGenerator;","map":{"version":3,"names":["SudokuGenerator","constructor","grid","Array","fill","map","generate","fillDiagonal","fillRemaining","removeKDigits","i","fillBox","unUsedInBox","rowStart","colStart","num","j","row","col","randomGenerator","Math","floor","random","K","count","cellId","CheckIfSafe","unUsedInRow","unUsedInCol","parseInt"],"sources":["C:/Users/marti/OneDrive/Skrivebord/Fagprojekt/Fagprojekt-/my-app/src/SudokuGenerator.js"],"sourcesContent":["class SudokuGenerator {\r\n    constructor() {\r\n      this.grid = Array(9).fill().map(() => Array(9).fill(0));\r\n    }\r\n  \r\n    generate() {\r\n      this.fillDiagonal();\r\n      this.fillRemaining(0, 3);\r\n      this.removeKDigits(20);\r\n      return this.grid;\r\n    }\r\n  \r\n    fillDiagonal() {\r\n      for (let i = 0; i < 9; i = i + 3)\r\n        this.fillBox(i, i);\r\n    }\r\n  \r\n    unUsedInBox(rowStart, colStart, num) {\r\n      for (let i = 0; i < 3; i++)\r\n        for (let j = 0; j < 3; j++)\r\n          if (this.grid[rowStart + i][colStart + j] === num)\r\n            return false;\r\n  \r\n      return true;\r\n    }\r\n  \r\n    fillBox(row, col) {\r\n      let num;\r\n      for (let i = 0; i < 3; i++) {\r\n        for (let j = 0; j < 3; j++) {\r\n          do {\r\n            num = this.randomGenerator(9);\r\n          }\r\n          while (!this.unUsedInBox(row, col, num));\r\n  \r\n          this.grid[row + i][col + j] = num;\r\n        }\r\n      }\r\n    }\r\n  \r\n    randomGenerator(num) {\r\n        return Math.floor((Math.random() * num));\r\n      }\r\n      \r\n      removeKDigits(K) {\r\n        let count = K;\r\n        while (count !== 0) {\r\n          let cellId = this.randomGenerator(81);\r\n      \r\n          let i = Math.floor(cellId / 9), j = cellId % 9;\r\n      \r\n          if (this.grid[i][j] !== 0) {\r\n            count--;\r\n            this.grid[i][j] = 0;\r\n          }\r\n        }\r\n      }\r\n  \r\n    CheckIfSafe(i, j, num) {\r\n      return (this.unUsedInRow(i, num) &&\r\n        this.unUsedInCol(j, num) &&\r\n        this.unUsedInBox(i - i % 3, j - j % 3, num));\r\n    }\r\n  \r\n    unUsedInRow(i, num) {\r\n      for (let j = 0; j < 9; j++)\r\n        if (this.grid[i][j] === num)\r\n          return false;\r\n      return true;\r\n    }\r\n  \r\n    unUsedInCol(j, num) {\r\n      for (let i = 0; i < 9; i++)\r\n        if (this.grid[i][j] === num)\r\n          return false;\r\n      return true;\r\n    }\r\n  \r\n    fillRemaining(i, j) {\r\n        if (j >= 9 && i < 8) {\r\n            i += 1;\r\n            j = 0;\r\n        }\r\n        if (i >= 9 && j >= 9) {\r\n            return true;\r\n        }\r\n    \r\n        if (i < 3) {\r\n            if (j < 3) {\r\n                j = 3;\r\n            }\r\n        } else if (i < 6) {\r\n            if (j === parseInt(i / 3) * 3) {\r\n                j += 3;\r\n            }\r\n        } else {\r\n            if (j === 6) {\r\n                i += 1;\r\n                j = 0;\r\n                if (i >= 9) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    \r\n        for (let num = 1; num <= 9; num++) {\r\n            if (this.CheckIfSafe(i, j, num)) {\r\n                this.grid[i][j] = num;\r\n                if (this.fillRemaining(i, j + 1)) {\r\n                    return true;\r\n                }\r\n                this.grid[i][j] = 0; // Backtrack\r\n            }\r\n        }\r\n    \r\n        return false; // Triggers backtracking\r\n    }\r\n}\r\n  \r\n  export default SudokuGenerator;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}