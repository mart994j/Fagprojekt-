{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marti\\\\OneDrive\\\\Skrivebord\\\\Fagprojekt\\\\Fagprojekt-\\\\my-app\\\\frontEnd\\\\src\\\\SudokuView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './SudokuView.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SudokuView() {\n  _s();\n  const [grid, setGrid] = useState([]);\n  const [validity, setValidity] = useState(Array(9).fill().map(() => Array(9).fill(true)));\n  const [editableCells, setEditableCells] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:3000/generate').then(response => response.json()).then(data => {\n      setGrid(data.board);\n      const editable = data.board.map(row => row.map(value => value === 0));\n      setEditableCells(editable);\n    }).catch(error => console.error('Error fetching data: ', error));\n  }, []);\n  const handleInputChange = (event, i, j) => {\n    if (!editableCells[i][j]) return;\n    const value = event.target.value;\n    if (value === '' || /^\\d+$/.test(value) && value >= 1 && value <= 9) {\n      const numValue = value === '' ? 0 : parseInt(value, 10);\n      const newGrid = grid.map((row, rowIndex) => row.map((cell, cellIndex) => rowIndex === i && cellIndex === j ? numValue : cell));\n      setGrid(newGrid);\n    }\n  };\n  const ValSudokuFront = () => {\n    fetch('http://localhost:3000/validate', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        grid: grid\n      })\n    }).then(response => response.json()).then(data => {\n      if (data.validate === true) {\n        alert(\"Valid Sudoku\");\n      } else {\n        alert(\"Invalid Sudoku\");\n      }\n    }).catch(error => console.error('Error:', error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"SudokuView\",\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: grid.map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((value, j) => /*#__PURE__*/_jsxDEV(\"td\", {\n            className: !validity[i][j] ? 'invalid' : '',\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: !validity[i][j] ? 'invalid-input' : '',\n              value: value === 0 ? '' : value,\n              onChange: event => handleInputChange(event, i, j),\n              readOnly: !editableCells[i][j]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 19\n            }, this)\n          }, j, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 17\n          }, this))\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button-blue\",\n      onClick: ValSudokuFront,\n      children: \"Check Sudoku\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(SudokuView, \"Q8UE+cz+R8veXBblq0TUPhnQRE4=\");\n_c = SudokuView;\nexport default SudokuView;\nvar _c;\n$RefreshReg$(_c, \"SudokuView\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SudokuView","_s","grid","setGrid","validity","setValidity","Array","fill","map","editableCells","setEditableCells","fetch","then","response","json","data","board","editable","row","value","catch","error","console","handleInputChange","event","i","j","target","test","numValue","parseInt","newGrid","rowIndex","cell","cellIndex","ValSudokuFront","method","headers","body","JSON","stringify","validate","alert","className","children","type","onChange","readOnly","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/marti/OneDrive/Skrivebord/Fagprojekt/Fagprojekt-/my-app/frontEnd/src/SudokuView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './SudokuView.css';\r\n\r\nfunction SudokuView() {\r\n  const [grid, setGrid] = useState([]);\r\n  const [validity, setValidity] = useState(Array(9).fill().map(() => Array(9).fill(true)));\r\n  const [editableCells, setEditableCells] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch('http://localhost:3000/generate')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setGrid(data.board);\r\n        const editable = data.board.map(row => row.map(value => value === 0));\r\n        setEditableCells(editable);\r\n      })\r\n      .catch(error => console.error('Error fetching data: ', error));\r\n  }, []);\r\n\r\n  const handleInputChange = (event, i, j) => {\r\n    if (!editableCells[i][j]) return;\r\n    const value = event.target.value;\r\n    if (value === '' || (/^\\d+$/.test(value) && value >= 1 && value <= 9)) {\r\n      const numValue = value === '' ? 0 : parseInt(value, 10);\r\n      const newGrid = grid.map((row, rowIndex) =>\r\n        row.map((cell, cellIndex) =>\r\n          rowIndex === i && cellIndex === j ? numValue : cell\r\n        )\r\n      );\r\n      setGrid(newGrid);\r\n    }\r\n  };\r\n\r\n  const ValSudokuFront = () => {\r\n    fetch('http://localhost:3000/validate', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ grid: grid })\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      if (data.validate === true) {\r\n        alert(\"Valid Sudoku\");\r\n      } else {\r\n        alert(\"Invalid Sudoku\");\r\n      }\r\n    })\r\n    .catch(error => console.error('Error:', error));\r\n  };\r\n\r\n  return (\r\n    <div className=\"SudokuView\">\r\n      <table className=\"center\">\r\n        <tbody>\r\n          {grid.map((row, i) => (\r\n            <tr key={i}>\r\n              {row.map((value, j) => (\r\n                <td key={j} className={!validity[i][j] ? 'invalid' : ''}>\r\n                  <input\r\n                    type=\"text\"\r\n                    className={!validity[i][j] ? 'invalid-input' : ''}\r\n                    value={value === 0 ? '' : value}\r\n                    onChange={(event) => handleInputChange(event, i, j)}\r\n                    readOnly={!editableCells[i][j]}\r\n                  />\r\n                </td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <button className=\"button-blue\" onClick={ValSudokuFront}>\r\n        Check Sudoku\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SudokuView;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}