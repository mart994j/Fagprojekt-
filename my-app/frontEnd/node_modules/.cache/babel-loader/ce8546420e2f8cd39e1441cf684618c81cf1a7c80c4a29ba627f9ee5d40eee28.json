{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marti\\\\OneDrive\\\\Skrivebord\\\\Fagprojekt\\\\Fagprojekt-\\\\my-app\\\\src\\\\SudokuView.js\",\n  _s = $RefreshSig$();\n//npm start\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SudokuView() {\n  _s();\n  // Initialize a 9x9 grid with some predefined numbers\n  const [grid, setGrid] = useState([]);\n  const handleInputChange = (event, i, j) => {\n    const value = event.target.value;\n    // Check if the input is a valid number or an empty string\n    if (value === '' || /^\\d+$/.test(value) && value >= 0 && value <= 9) {\n      const numValue = value === '' ? 0 : parseInt(value, 10); // Convert input to number or reset to 0 if empty\n\n      // Create a new grid with the updated value\n      const newGrid = grid.map((row, rowIndex) => row.map((cell, cellIndex) => rowIndex === i && cellIndex === j ? numValue : cell));\n      setGrid(newGrid);\n    }\n    // If the input is not valid (letters or invalid characters), do nothing\n  };\n  const isValidSudoku = () => {\n    for (let i = 0; i < 9; i++) {\n      const row = new Set();\n      const col = new Set();\n      const box = new Set();\n      for (let j = 0; j < 9; j++) {\n        const valueRow = grid[i][j];\n        const valueCol = grid[j][i];\n        const valueBox = grid[3 * Math.floor(i / 3) + Math.floor(j / 3)][3 * (i % 3) + j % 3];\n        if (valueRow > 0 && row.has(valueRow) || valueCol > 0 && col.has(valueCol) || valueBox > 0 && box.has(valueBox)) {\n          return 'Invalid Sudoku'; // Set the validation message to 'Invalid Sudoku'\n        }\n        row.add(valueRow);\n        col.add(valueCol);\n        box.add(valueBox);\n      }\n    }\n    return 'Valid Sudoku'; // Set the validation message to 'Valid Sudoku'\n  };\n  const checkSudoku = () => {\n    alert(isValidSudoku()); // Display the validation message in an alert\n  };\n  useEffect(() => {\n    // Generate a new board when the component mounts\n    const newBoard = generateBoard();\n    setGrid(newBoard);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"SodukoView\",\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: grid.map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((value, j) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: value === 0 ? '' : value,\n              onChange: event => handleInputChange(event, i, j)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 19\n            }, this)\n          }, j, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 17\n          }, this))\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: checkSudoku,\n      children: \"Check Sudoku\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n  function generateBoard() {\n    let board = Array.from({\n      length: 9\n    }, () => Array(9).fill(0));\n    const fillBoard = board => {\n      for (let i = 0; i < 9; i++) {\n        for (let j = 0; j < 9; j++) {\n          if (board[i][j] === 0) {\n            for (let num = 1; num <= 9; num++) {\n              if (isValid(board, i, j, num)) {\n                board[i][j] = num;\n                if (fillBoard(board)) {\n                  return true;\n                } else {\n                  board[i][j] = 0; // undo & try again\n                }\n              }\n            }\n            return false; // trigger backtracking from previous cell\n          }\n        }\n      }\n      return true; // sudoku solved\n    };\n    const isValid = (board, row, col, num) => {\n      for (let i = 0; i < 9; i++) {\n        const m = 3 * Math.floor(row / 3) + Math.floor(i / 3);\n        const n = 3 * Math.floor(col / 3) + i % 3;\n        if (board[row][i] === num || board[i][col] === num || board[m][n] === num) {\n          return false; // not valid\n        }\n      }\n      return true; // valid\n    };\n    fillBoard(board);\n    return board;\n  }\n}\n_s(SudokuView, \"w1YSakViRD9z3AUkL5Qso5coyFg=\");\n_c = SudokuView;\nexport default SudokuView;\nvar _c;\n$RefreshReg$(_c, \"SudokuView\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","SudokuView","_s","grid","setGrid","handleInputChange","event","i","j","value","target","test","numValue","parseInt","newGrid","map","row","rowIndex","cell","cellIndex","isValidSudoku","Set","col","box","valueRow","valueCol","valueBox","Math","floor","has","add","checkSudoku","alert","useEffect","newBoard","generateBoard","className","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","board","Array","from","length","fill","fillBoard","num","isValid","m","n","_c","$RefreshReg$"],"sources":["C:/Users/marti/OneDrive/Skrivebord/Fagprojekt/Fagprojekt-/my-app/src/SudokuView.js"],"sourcesContent":["//npm start\r\n\r\nimport React, { useState } from 'react';\r\nimport './App.css';\r\n\r\n\r\n\r\nfunction SudokuView() {\r\n  // Initialize a 9x9 grid with some predefined numbers\r\n  const [grid, setGrid] = useState([]);\r\n\r\n\r\n  const handleInputChange = (event, i, j) => {\r\n    const value = event.target.value;\r\n    // Check if the input is a valid number or an empty string\r\n    if (value === '' || (/^\\d+$/.test(value) && value >= 0 && value <= 9)) {\r\n      const numValue = value === '' ? 0 : parseInt(value, 10); // Convert input to number or reset to 0 if empty\r\n  \r\n      // Create a new grid with the updated value\r\n      const newGrid = grid.map((row, rowIndex) =>\r\n        row.map((cell, cellIndex) =>\r\n          rowIndex === i && cellIndex === j ? numValue : cell\r\n        )\r\n      );\r\n  \r\n      setGrid(newGrid);\r\n    }\r\n    // If the input is not valid (letters or invalid characters), do nothing\r\n  };\r\n  const isValidSudoku = () => {\r\n    for (let i = 0; i < 9; i++) {\r\n      const row = new Set();\r\n      const col = new Set();\r\n      const box = new Set();\r\n\r\n      for (let j = 0; j < 9; j++) {\r\n        const valueRow = grid[i][j];\r\n        const valueCol = grid[j][i];\r\n        const valueBox = grid[3 * Math.floor(i / 3) + Math.floor(j / 3)][3 * (i % 3) + (j % 3)];\r\n\r\n        if ((valueRow > 0 && row.has(valueRow)) || (valueCol > 0 && col.has(valueCol)) || (valueBox > 0 && box.has(valueBox))) {\r\n          return 'Invalid Sudoku'; // Set the validation message to 'Invalid Sudoku'\r\n          \r\n        }\r\n\r\n        row.add(valueRow);\r\n        col.add(valueCol);\r\n        box.add(valueBox);\r\n      }\r\n    }\r\n\r\n    return 'Valid Sudoku'; // Set the validation message to 'Valid Sudoku'\r\n  };\r\n  \r\n  const checkSudoku = () => {\r\n    alert(isValidSudoku()); // Display the validation message in an alert\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Generate a new board when the component mounts\r\n    const newBoard = generateBoard();\r\n    setGrid(newBoard);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"SodukoView\">\r\n      <table className=\"center\">\r\n        <tbody>\r\n          {grid.map((row, i) => (\r\n            <tr key={i}>\r\n              {row.map((value, j) => (\r\n                <td key={j}>\r\n                  <input \r\n                    type=\"text\" \r\n                    value={value === 0 ? '' : value} \r\n                    onChange={event => handleInputChange(event, i, j)} \r\n                  />\r\n                </td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <button onClick={checkSudoku}>Check Sudoku</button>\r\n    </div>\r\n  );\r\n\r\n\r\n  function generateBoard() {\r\n    let board = Array.from({length: 9}, () => Array(9).fill(0));\r\n  \r\n    const fillBoard = (board) => {\r\n      for (let i = 0; i < 9; i++) {\r\n        for (let j = 0; j < 9; j++) {\r\n          if (board[i][j] === 0) {\r\n            for (let num = 1; num <= 9; num++) {\r\n              if (isValid(board, i, j, num)) {\r\n                board[i][j] = num;\r\n                if (fillBoard(board)) {\r\n                  return true;\r\n                } else {\r\n                  board[i][j] = 0; // undo & try again\r\n                }\r\n              }\r\n            }\r\n            return false; // trigger backtracking from previous cell\r\n          }\r\n        }\r\n      }\r\n      return true; // sudoku solved\r\n    };\r\n  \r\n    const isValid = (board, row, col, num) => {\r\n      for (let i = 0; i < 9; i++) {\r\n        const m = 3 * Math.floor(row / 3) + Math.floor(i / 3);\r\n        const n = 3 * Math.floor(col / 3) + i % 3;\r\n        if (board[row][i] === num || board[i][col] === num || board[m][n] === num) {\r\n          return false; // not valid\r\n        }\r\n      }\r\n      return true; // valid\r\n    };\r\n  \r\n    fillBoard(board);\r\n    return board;\r\n  }\r\n}\r\n\r\nexport default SudokuView;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}