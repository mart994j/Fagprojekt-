{"ast":null,"code":"export const fetchNewBoard = ({\n  setGrid,\n  setEditableCells,\n  setUserEdits,\n  setValidity,\n  setIsDataLoaded,\n  setTimer,\n  setIsTimerActive,\n  k = 4,\n  // Assuming default values for k and n\n  n = 9\n}) => {\n  console.log('Fetching new board...');\n  // Append k and n as query parameters\n  const url = `http://localhost:3000/generate?k=${k}&n=${n}`;\n  fetch(url).then(response => {\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return response.json();\n  }).then(data => {\n    if (!data.board || !Array.isArray(data.board) || data.board.length === 0) {\n      console.error('Invalid or empty board data received:', data);\n      throw new Error('Invalid or empty board data received');\n    }\n    console.log('Board fetched:', data.board);\n    const boardSize = data.board.length;\n    setGrid(data.board);\n    const editable = data.board.map(row => row.map(value => value === 0));\n    setEditableCells(editable);\n    const userEditsArray = Array(boardSize).fill().map(() => Array(boardSize).fill(false));\n    setUserEdits(userEditsArray);\n    const validityArray = Array(boardSize).fill().map(() => Array(boardSize).fill(true));\n    setValidity(validityArray);\n    setIsDataLoaded(true);\n    setTimer(0);\n    setIsTimerActive(true);\n  }).catch(error => {\n    console.error('Error fetching data:', error);\n    // Consider setting some error state here to inform the user\n    setIsDataLoaded(false); // Indicate that data loading failed\n  });\n};","map":{"version":3,"names":["fetchNewBoard","setGrid","setEditableCells","setUserEdits","setValidity","setIsDataLoaded","setTimer","setIsTimerActive","k","n","console","log","url","fetch","then","response","ok","Error","status","json","data","board","Array","isArray","length","error","boardSize","editable","map","row","value","userEditsArray","fill","validityArray","catch"],"sources":["C:/Users/marti/OneDrive/Skrivebord/Fagprojekt/Fagprojekt-/my-app/frontEnd/src/fetchNewBoard.js"],"sourcesContent":["export const fetchNewBoard = ({\r\n  setGrid,\r\n  setEditableCells,\r\n  setUserEdits,\r\n  setValidity,\r\n  setIsDataLoaded,\r\n  setTimer,\r\n  setIsTimerActive,\r\n  k = 4, // Assuming default values for k and n\r\n  n = 9\r\n}) => {\r\n  console.log('Fetching new board...');\r\n  // Append k and n as query parameters\r\n  const url = `http://localhost:3000/generate?k=${k}&n=${n}`;\r\n\r\n  fetch(url)\r\n    .then(response => {\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      return response.json();\r\n    })\r\n    .then(data => {\r\n      if (!data.board || !Array.isArray(data.board) || data.board.length === 0) {\r\n        console.error('Invalid or empty board data received:', data);\r\n        throw new Error('Invalid or empty board data received');\r\n      }\r\n\r\n      console.log('Board fetched:', data.board);\r\n      const boardSize = data.board.length;\r\n\r\n      setGrid(data.board);\r\n\r\n      const editable = data.board.map(row => row.map(value => value === 0));\r\n      setEditableCells(editable);\r\n\r\n      const userEditsArray = Array(boardSize).fill().map(() => Array(boardSize).fill(false));\r\n      setUserEdits(userEditsArray);\r\n\r\n      const validityArray = Array(boardSize).fill().map(() => Array(boardSize).fill(true));\r\n      setValidity(validityArray);\r\n\r\n      setIsDataLoaded(true);\r\n      setTimer(0);\r\n      setIsTimerActive(true);\r\n    })\r\n    .catch(error => {\r\n      console.error('Error fetching data:', error);\r\n      // Consider setting some error state here to inform the user\r\n      setIsDataLoaded(false); // Indicate that data loading failed\r\n    });\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAGA,CAAC;EAC5BC,OAAO;EACPC,gBAAgB;EAChBC,YAAY;EACZC,WAAW;EACXC,eAAe;EACfC,QAAQ;EACRC,gBAAgB;EAChBC,CAAC,GAAG,CAAC;EAAE;EACPC,CAAC,GAAG;AACN,CAAC,KAAK;EACJC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;EACpC;EACA,MAAMC,GAAG,GAAI,oCAAmCJ,CAAE,MAAKC,CAAE,EAAC;EAE1DI,KAAK,CAACD,GAAG,CAAC,CACPE,IAAI,CAACC,QAAQ,IAAI;IAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAE,uBAAsBF,QAAQ,CAACG,MAAO,EAAC,CAAC;IAC3D;IACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,CACDL,IAAI,CAACM,IAAI,IAAI;IACZ,IAAI,CAACA,IAAI,CAACC,KAAK,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,IAAI,CAACC,KAAK,CAAC,IAAID,IAAI,CAACC,KAAK,CAACG,MAAM,KAAK,CAAC,EAAE;MACxEd,OAAO,CAACe,KAAK,CAAC,uCAAuC,EAAEL,IAAI,CAAC;MAC5D,MAAM,IAAIH,KAAK,CAAC,sCAAsC,CAAC;IACzD;IAEAP,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAES,IAAI,CAACC,KAAK,CAAC;IACzC,MAAMK,SAAS,GAAGN,IAAI,CAACC,KAAK,CAACG,MAAM;IAEnCvB,OAAO,CAACmB,IAAI,CAACC,KAAK,CAAC;IAEnB,MAAMM,QAAQ,GAAGP,IAAI,CAACC,KAAK,CAACO,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACD,GAAG,CAACE,KAAK,IAAIA,KAAK,KAAK,CAAC,CAAC,CAAC;IACrE5B,gBAAgB,CAACyB,QAAQ,CAAC;IAE1B,MAAMI,cAAc,GAAGT,KAAK,CAACI,SAAS,CAAC,CAACM,IAAI,CAAC,CAAC,CAACJ,GAAG,CAAC,MAAMN,KAAK,CAACI,SAAS,CAAC,CAACM,IAAI,CAAC,KAAK,CAAC,CAAC;IACtF7B,YAAY,CAAC4B,cAAc,CAAC;IAE5B,MAAME,aAAa,GAAGX,KAAK,CAACI,SAAS,CAAC,CAACM,IAAI,CAAC,CAAC,CAACJ,GAAG,CAAC,MAAMN,KAAK,CAACI,SAAS,CAAC,CAACM,IAAI,CAAC,IAAI,CAAC,CAAC;IACpF5B,WAAW,CAAC6B,aAAa,CAAC;IAE1B5B,eAAe,CAAC,IAAI,CAAC;IACrBC,QAAQ,CAAC,CAAC,CAAC;IACXC,gBAAgB,CAAC,IAAI,CAAC;EACxB,CAAC,CAAC,CACD2B,KAAK,CAACT,KAAK,IAAI;IACdf,OAAO,CAACe,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C;IACApB,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;EAC1B,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}