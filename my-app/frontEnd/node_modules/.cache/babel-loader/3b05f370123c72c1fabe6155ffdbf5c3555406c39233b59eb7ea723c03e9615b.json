{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marti\\\\OneDrive\\\\Skrivebord\\\\Fagprojekt\\\\Fagprojekt-\\\\my-app\\\\frontEnd\\\\src\\\\SudokuView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './SudokuView.css';\nimport { isValidSudoku } from './sudokuUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SudokuView() {\n  _s();\n  const [grid, setGrid] = useState([]);\n  const [validity, setValidity] = useState(Array(9).fill().map(() => Array(9).fill(true)));\n  const [isDataLoaded, setIsDataLoaded] = useState(false);\n  const [editableCells, setEditableCells] = useState([]);\n  const [userEdits, setUserEdits] = useState(Array(9).fill().map(() => Array(9).fill(false)));\n  const [timer, setTimer] = useState(0);\n  const [isTimerActive, setIsTimerActive] = useState(false);\n  useEffect(() => {\n    fetch('http://localhost:3000/generate').then(response => response.json()).then(data => {\n      setGrid(data.board);\n      const editable = data.board.map(row => row.map(value => value === 0));\n      setEditableCells(editable);\n      setIsDataLoaded(true);\n      setIsTimerActive(true); // Start timeren, når data er indlæst\n    }).catch(error => console.error('Error fetching data: ', error));\n    const interval = setInterval(() => {\n      if (isTimerActive) {\n        setTimer(prevTimer => prevTimer + 1);\n      }\n    }, 1000);\n    return () => clearInterval(interval); // Ryd op, når komponenten unmounts\n  }, [isTimerActive]);\n  const handleInputChange = (event, i, j) => {\n    if (!editableCells[i][j]) {\n      // hvis cellen ikke er redigerbar, gør intet\n      return;\n    }\n    const value = event.target.value;\n    if (value === '' || /^\\d+$/.test(value) && value >= 1 && value <= 9) {\n      const numValue = value === '' ? 0 : parseInt(value, 10); // convert to number\n\n      const newGrid = grid.map((row, rowIndex) => row.map((cell, cellIndex) => rowIndex === i && cellIndex === j ? numValue : cell));\n      setGrid(newGrid);\n\n      // Mark the cell as edited by the user\n      const newUserEdits = [...userEdits];\n      newUserEdits[i][j] = true; // Mark as edited\n      setUserEdits(newUserEdits);\n    }\n    //hvis input ikke er gyldigt, gør intet og returner tilbage til inputfeltet og \n  };\n  const checkSudoku = useCallback(() => {\n    if (!isDataLoaded) return;\n    const {\n      isValid,\n      newValidity\n    } = isValidSudoku(grid);\n    setValidity(newValidity);\n    const isFullyFilled = grid.every(row => row.every(value => value !== 0));\n    if (isValid && isFullyFilled) {\n      alert(\"Congratulations! You've solved the Sudoku!\");\n      setIsTimerActive(false); // Stop timeren, når Sudoku er løst\n    }\n  }, [grid, isDataLoaded]);\n\n  // Opretter en useEffect til at stoppe timeren, når spillet er løst\n  useEffect(() => {\n    if (isDataLoaded) {\n      checkSudoku();\n    }\n  }, [grid, isDataLoaded, checkSudoku]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"SudokuView\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Timer: \", timer, \" sekunder\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: grid.map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((value, j) => /*#__PURE__*/_jsxDEV(\"td\", {\n            className: !validity[i][j] ? 'invalid' : '',\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: `${!validity[i][j] ? 'invalid-input' : ''} ${userEdits[i][j] ? 'user-input' : ''}`,\n              value: value === 0 ? '' : value,\n              onChange: event => handleInputChange(event, i, j),\n              readOnly: !editableCells[i][j] // Gør inputfeltet ikke-redigerbart, hvis cellen ikke er redigerbar\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 19\n            }, this)\n          }, j, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 17\n          }, this))\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n_s(SudokuView, \"UDeRIJ6BSlzSWunAbZARyPNA7bo=\");\n_c = SudokuView;\nexport default SudokuView;\nvar _c;\n$RefreshReg$(_c, \"SudokuView\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","isValidSudoku","jsxDEV","_jsxDEV","SudokuView","_s","grid","setGrid","validity","setValidity","Array","fill","map","isDataLoaded","setIsDataLoaded","editableCells","setEditableCells","userEdits","setUserEdits","timer","setTimer","isTimerActive","setIsTimerActive","fetch","then","response","json","data","board","editable","row","value","catch","error","console","interval","setInterval","prevTimer","clearInterval","handleInputChange","event","i","j","target","test","numValue","parseInt","newGrid","rowIndex","cell","cellIndex","newUserEdits","checkSudoku","isValid","newValidity","isFullyFilled","every","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","readOnly","_c","$RefreshReg$"],"sources":["C:/Users/marti/OneDrive/Skrivebord/Fagprojekt/Fagprojekt-/my-app/frontEnd/src/SudokuView.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport './SudokuView.css';\r\nimport { isValidSudoku } from './sudokuUtils';\r\n\r\n\r\n\r\n\r\nfunction SudokuView() {\r\n  const [grid, setGrid] = useState([]);\r\n  const [validity, setValidity] = useState(Array(9).fill().map(() => Array(9).fill(true)));\r\n  const [isDataLoaded, setIsDataLoaded] = useState(false);\r\n  const [editableCells, setEditableCells] = useState([]);\r\n  const [userEdits, setUserEdits] = useState(Array(9).fill().map(() => Array(9).fill(false)));\r\n  const [timer, setTimer] = useState(0);\r\n  const [isTimerActive, setIsTimerActive] = useState(false);\r\n\r\n\r\n  useEffect(() => {\r\n    fetch('http://localhost:3000/generate')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setGrid(data.board);\r\n        const editable = data.board.map(row => row.map(value => value === 0));\r\n        setEditableCells(editable);\r\n        setIsDataLoaded(true);\r\n        setIsTimerActive(true); // Start timeren, når data er indlæst\r\n      })\r\n      .catch(error => console.error('Error fetching data: ', error));\r\n\r\n    const interval = setInterval(() => {\r\n      if (isTimerActive) {\r\n        setTimer(prevTimer => prevTimer + 1);\r\n      }\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval); // Ryd op, når komponenten unmounts\r\n  }, [isTimerActive]);\r\n\r\n\r\n\r\n\r\n  const handleInputChange = (event, i, j) => {\r\n    if (!editableCells[i][j]) {\r\n      // hvis cellen ikke er redigerbar, gør intet\r\n      return;\r\n    }\r\n    const value = event.target.value;\r\n    if (value === '' || (/^\\d+$/.test(value) && value >= 1 && value <= 9)) {\r\n      const numValue = value === '' ? 0 : parseInt(value, 10); // convert to number\r\n  \r\n      const newGrid = grid.map((row, rowIndex) =>\r\n        row.map((cell, cellIndex) =>\r\n          rowIndex === i && cellIndex === j ? numValue : cell\r\n        )\r\n      );\r\n  \r\n      setGrid(newGrid);\r\n\r\n       // Mark the cell as edited by the user\r\n       const newUserEdits = [...userEdits];\r\n       newUserEdits[i][j] = true; // Mark as edited\r\n       setUserEdits(newUserEdits);\r\n   \r\n    }\r\n    //hvis input ikke er gyldigt, gør intet og returner tilbage til inputfeltet og \r\n  };\r\n\r\n  const checkSudoku = useCallback(() => {\r\n    if (!isDataLoaded) return;\r\n    const { isValid, newValidity } = isValidSudoku(grid);\r\n    setValidity(newValidity);\r\n    const isFullyFilled = grid.every(row => row.every(value => value !== 0));\r\n    if (isValid && isFullyFilled) {\r\n      alert(\"Congratulations! You've solved the Sudoku!\");\r\n      setIsTimerActive(false); // Stop timeren, når Sudoku er løst\r\n    }\r\n  }, [grid, isDataLoaded]);\r\n\r\n    // Opretter en useEffect til at stoppe timeren, når spillet er løst\r\n    useEffect(() => {\r\n      if (isDataLoaded) {\r\n        checkSudoku();\r\n      }\r\n    }, [grid, isDataLoaded, checkSudoku]);\r\n\r\n  \r\n\r\n\r\n  return (\r\n    <div className=\"SudokuView\">\r\n      <div>Timer: {timer} sekunder</div>\r\n      <table className=\"center\">\r\n        <tbody>\r\n          {grid.map((row, i) => (\r\n            <tr key={i}>\r\n              {row.map((value, j) => (\r\n                <td key={j} className={!validity[i][j] ? 'invalid' : ''}>\r\n                  <input\r\n                    type=\"text\"\r\n                    className={`${!validity[i][j] ? 'invalid-input' : ''} ${userEdits[i][j] ? 'user-input' : ''}`}\r\n                    value={value === 0 ? '' : value}\r\n                    onChange={(event) => handleInputChange(event, i, j)}\r\n                    readOnly={!editableCells[i][j]} // Gør inputfeltet ikke-redigerbart, hvis cellen ikke er redigerbar\r\n                  />\r\n                </td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default SudokuView;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}