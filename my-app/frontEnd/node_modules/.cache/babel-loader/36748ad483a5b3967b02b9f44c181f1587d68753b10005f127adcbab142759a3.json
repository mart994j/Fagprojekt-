{"ast":null,"code":"let isFetching = false;\nexport const fetchNewBoard = ({\n  n,\n  // Adding n as a parameter\n  setGrid,\n  setEditableCells,\n  setUserEdits,\n  setValidity,\n  setIsDataLoaded,\n  setTimer,\n  setIsTimerActive\n}) => {\n  // Early return if already fetching\n  if (isFetching) return;\n  isFetching = true;\n\n  // Update the URL to include the size n as a query parameter\n  fetch(`http://localhost:3000/generate?size=${n}`);\n  console.log('fetching new board with size:', n).then(response => response.json()).then(data => {\n    // Set grid based on fetched data\n    setGrid(data.board);\n    // Calculate which cells are editable (where value is 0)\n    const editable = data.board.map(row => row.map(value => value === 0));\n    setEditableCells(editable);\n    // Update userEdits and validity based on the dynamic size of n\n    setUserEdits(Array(n).fill().map(() => Array(n).fill(false)));\n    setValidity(Array(n).fill().map(() => Array(n).fill(true)));\n    setIsDataLoaded(true);\n    setTimer(0);\n    setIsTimerActive(true);\n  }).catch(error => {\n    console.error('Error fetching data: ', error);\n    setIsDataLoaded(false); // Handle error state correctly\n  }).finally(() => {\n    // Reset isFetching to allow new fetches\n    isFetching = false;\n  });\n};","map":{"version":3,"names":["isFetching","fetchNewBoard","n","setGrid","setEditableCells","setUserEdits","setValidity","setIsDataLoaded","setTimer","setIsTimerActive","fetch","console","log","then","response","json","data","board","editable","map","row","value","Array","fill","catch","error","finally"],"sources":["C:/Users/marti/OneDrive/Skrivebord/Fagprojekt/Fagprojekt-/my-app/frontEnd/src/fetchNewBoard.js"],"sourcesContent":["let isFetching = false;\r\n\r\nexport const fetchNewBoard = ({\r\n  n, // Adding n as a parameter\r\n  setGrid,\r\n  setEditableCells,\r\n  setUserEdits,\r\n  setValidity,\r\n  setIsDataLoaded,\r\n  setTimer,\r\n  setIsTimerActive\r\n}) => {\r\n  // Early return if already fetching\r\n  if (isFetching) return;\r\n  isFetching = true;\r\n\r\n  // Update the URL to include the size n as a query parameter\r\n  fetch(`http://localhost:3000/generate?size=${n}`)\r\n  console.log('fetching new board with size:', n)\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      // Set grid based on fetched data\r\n      setGrid(data.board);\r\n      // Calculate which cells are editable (where value is 0)\r\n      const editable = data.board.map(row => row.map(value => value === 0));\r\n      setEditableCells(editable);\r\n      // Update userEdits and validity based on the dynamic size of n\r\n      setUserEdits(Array(n).fill().map(() => Array(n).fill(false)));\r\n      setValidity(Array(n).fill().map(() => Array(n).fill(true)));\r\n      setIsDataLoaded(true);\r\n      setTimer(0);\r\n      setIsTimerActive(true);\r\n    })\r\n    .catch(error => {\r\n      console.error('Error fetching data: ', error);\r\n      setIsDataLoaded(false); // Handle error state correctly\r\n    })\r\n    .finally(() => {\r\n      // Reset isFetching to allow new fetches\r\n      isFetching = false;\r\n    });\r\n};\r\n"],"mappings":"AAAA,IAAIA,UAAU,GAAG,KAAK;AAEtB,OAAO,MAAMC,aAAa,GAAGA,CAAC;EAC5BC,CAAC;EAAE;EACHC,OAAO;EACPC,gBAAgB;EAChBC,YAAY;EACZC,WAAW;EACXC,eAAe;EACfC,QAAQ;EACRC;AACF,CAAC,KAAK;EACJ;EACA,IAAIT,UAAU,EAAE;EAChBA,UAAU,GAAG,IAAI;;EAEjB;EACAU,KAAK,CAAE,uCAAsCR,CAAE,EAAC,CAAC;EACjDS,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEV,CAAC,CAAC,CAC5CW,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;IACZ;IACAb,OAAO,CAACa,IAAI,CAACC,KAAK,CAAC;IACnB;IACA,MAAMC,QAAQ,GAAGF,IAAI,CAACC,KAAK,CAACE,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACD,GAAG,CAACE,KAAK,IAAIA,KAAK,KAAK,CAAC,CAAC,CAAC;IACrEjB,gBAAgB,CAACc,QAAQ,CAAC;IAC1B;IACAb,YAAY,CAACiB,KAAK,CAACpB,CAAC,CAAC,CAACqB,IAAI,CAAC,CAAC,CAACJ,GAAG,CAAC,MAAMG,KAAK,CAACpB,CAAC,CAAC,CAACqB,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IAC7DjB,WAAW,CAACgB,KAAK,CAACpB,CAAC,CAAC,CAACqB,IAAI,CAAC,CAAC,CAACJ,GAAG,CAAC,MAAMG,KAAK,CAACpB,CAAC,CAAC,CAACqB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3DhB,eAAe,CAAC,IAAI,CAAC;IACrBC,QAAQ,CAAC,CAAC,CAAC;IACXC,gBAAgB,CAAC,IAAI,CAAC;EACxB,CAAC,CAAC,CACDe,KAAK,CAACC,KAAK,IAAI;IACdd,OAAO,CAACc,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7ClB,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;EAC1B,CAAC,CAAC,CACDmB,OAAO,CAAC,MAAM;IACb;IACA1B,UAAU,GAAG,KAAK;EACpB,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}