{"ast":null,"code":"export const fetchNewBoard = ({\n  k,\n  n,\n  setGrid,\n  setEditableCells,\n  setUserEdits,\n  setValidity,\n  setIsDataLoaded,\n  setTimer,\n  setIsTimerActive\n}) => {\n  // Assuming your API can accept query parameters for k and n\n  // Adjust the URL accordingly if your API expects a different format\n  const apiUrl = `http://localhost:3000/generate?k=${k}&n=${n}`;\n  fetch(apiUrl).then(response => response.json()).then(data => {\n    console.log(\"Received board data:\", data);\n    setGrid(data.board);\n    // Generate editable cells based on whether the cell value is 0\n    const editable = data.board.map(row => row.map(value => value === 0));\n    setEditableCells(editable);\n    // Dynamically set the size of the userEdits and validity arrays based on the board size\n    setUserEdits(Array(n).fill().map(() => Array(n).fill(false)));\n    setValidity(Array(n).fill().map(() => Array(n).fill(true)));\n    setIsDataLoaded(true);\n    setTimer(0);\n    setIsTimerActive(true);\n  }).catch(error => {\n    console.error('Error fetching data: ', error);\n  });\n};","map":{"version":3,"names":["fetchNewBoard","k","n","setGrid","setEditableCells","setUserEdits","setValidity","setIsDataLoaded","setTimer","setIsTimerActive","apiUrl","fetch","then","response","json","data","console","log","board","editable","map","row","value","Array","fill","catch","error"],"sources":["C:/Users/marti/OneDrive/Skrivebord/Fagprojekt/Fagprojekt-/my-app/frontEnd/src/fetchNewBoard.js"],"sourcesContent":["export const fetchNewBoard = ({\r\n  k,\r\n  n,\r\n  setGrid,\r\n  setEditableCells,\r\n  setUserEdits,\r\n  setValidity,\r\n  setIsDataLoaded,\r\n  setTimer,\r\n  setIsTimerActive\r\n}) => {\r\n  // Assuming your API can accept query parameters for k and n\r\n  // Adjust the URL accordingly if your API expects a different format\r\n  const apiUrl = `http://localhost:3000/generate?k=${k}&n=${n}`;\r\n\r\n  fetch(apiUrl)\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      console.log(\"Received board data:\", data);\r\n      setGrid(data.board);\r\n      // Generate editable cells based on whether the cell value is 0\r\n      const editable = data.board.map(row => row.map(value => value === 0));\r\n      setEditableCells(editable);\r\n      // Dynamically set the size of the userEdits and validity arrays based on the board size\r\n      setUserEdits(Array(n).fill().map(() => Array(n).fill(false)));\r\n      setValidity(Array(n).fill().map(() => Array(n).fill(true)));\r\n      setIsDataLoaded(true);\r\n      setTimer(0);\r\n      setIsTimerActive(true);\r\n    })\r\n    .catch(error => {\r\n      console.error('Error fetching data: ', error);\r\n    });\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAGA,CAAC;EAC5BC,CAAC;EACDC,CAAC;EACDC,OAAO;EACPC,gBAAgB;EAChBC,YAAY;EACZC,WAAW;EACXC,eAAe;EACfC,QAAQ;EACRC;AACF,CAAC,KAAK;EACJ;EACA;EACA,MAAMC,MAAM,GAAI,oCAAmCT,CAAE,MAAKC,CAAE,EAAC;EAE7DS,KAAK,CAACD,MAAM,CAAC,CACVE,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;IACZC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEF,IAAI,CAAC;IACzCZ,OAAO,CAACY,IAAI,CAACG,KAAK,CAAC;IACnB;IACA,MAAMC,QAAQ,GAAGJ,IAAI,CAACG,KAAK,CAACE,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACD,GAAG,CAACE,KAAK,IAAIA,KAAK,KAAK,CAAC,CAAC,CAAC;IACrElB,gBAAgB,CAACe,QAAQ,CAAC;IAC1B;IACAd,YAAY,CAACkB,KAAK,CAACrB,CAAC,CAAC,CAACsB,IAAI,CAAC,CAAC,CAACJ,GAAG,CAAC,MAAMG,KAAK,CAACrB,CAAC,CAAC,CAACsB,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IAC7DlB,WAAW,CAACiB,KAAK,CAACrB,CAAC,CAAC,CAACsB,IAAI,CAAC,CAAC,CAACJ,GAAG,CAAC,MAAMG,KAAK,CAACrB,CAAC,CAAC,CAACsB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3DjB,eAAe,CAAC,IAAI,CAAC;IACrBC,QAAQ,CAAC,CAAC,CAAC;IACXC,gBAAgB,CAAC,IAAI,CAAC;EACxB,CAAC,CAAC,CACDgB,KAAK,CAACC,KAAK,IAAI;IACdV,OAAO,CAACU,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;EAC/C,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}