{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marti\\\\OneDrive\\\\Skrivebord\\\\Fagprojekt\\\\Fagprojekt-\\\\my-app\\\\frontEnd\\\\src\\\\SudokuView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useContext } from 'react';\nimport './CSS/SudokuView.css';\nimport { isValidSudoku } from './sudokuUtils';\nimport { fetchNewBoard } from './fetchNewBoard';\nimport UserContext from './UserContext';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SudokuView() {\n  _s();\n  const [grid, setGrid] = useState([]);\n  const [validity, setValidity] = useState(Array(9).fill().map(() => Array(9).fill(true)));\n  const [isDataLoaded, setIsDataLoaded] = useState(false);\n  const [editableCells, setEditableCells] = useState([]);\n  const [userEdits, setUserEdits] = useState(Array(9).fill().map(() => Array(9).fill(false)));\n  const [timer, setTimer] = useState(0);\n  const [isTimerActive, setIsTimerActive] = useState(false);\n  const {\n    username\n  } = useContext(UserContext);\n  const navigate = useNavigate();\n\n  // Henter et nyt board fra serveren \n  useEffect(() => {\n    fetchNewBoard({\n      setGrid,\n      setEditableCells,\n      setUserEdits,\n      setValidity,\n      setIsDataLoaded,\n      setTimer,\n      setIsTimerActive\n    });\n  }, []);\n\n  // Timer logik \n  useEffect(() => {\n    let interval = null;\n    if (isTimerActive) {\n      interval = setInterval(() => {\n        setTimer(prevTimer => prevTimer + 1);\n      }, 1000);\n    } else {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [isTimerActive]);\n\n  // Håndterer input fra brugeren\n  const handleInputChange = useCallback((event, i, j) => {\n    if (!editableCells[i][j]) {\n      return;\n    }\n    const value = event.target.value;\n    // Tjekker om input er gyldigt \n    if (value === '' || /^\\d+$/.test(value) && value >= 1 && value <= 9) {\n      const numValue = value === '' ? 0 : parseInt(value, 10);\n      const newGrid = grid.map((row, rowIndex) => row.map((cell, cellIndex) => rowIndex === i && cellIndex === j ? numValue : cell));\n      setGrid(newGrid);\n      const newUserEdits = [...userEdits];\n      newUserEdits[i][j] = true;\n      setUserEdits(newUserEdits);\n    }\n  }, [editableCells, grid, userEdits]);\n\n  // Tjekker om Sudoku er løst\n  const checkSudoku = useCallback(() => {\n    if (!isDataLoaded) return;\n    const {\n      isValid,\n      newValidity\n    } = isValidSudoku(grid);\n    setValidity(newValidity);\n    // Tjekker om brættet er fuldt udfyldt og gyldigt\n    const isFullyFilled = grid.every(row => row.every(value => value !== 0));\n    if (isValid && isFullyFilled) {\n      alert(`Congratulations! You've solved the Sudoku in ${timer} seconds!`);\n      setIsTimerActive(false);\n      submitScore(username, timer);\n      navigate('/');\n    }\n  }, [grid, isDataLoaded, timer, username, navigate]);\n  useEffect(() => {\n    if (isDataLoaded) {\n      checkSudoku();\n    }\n  }, [grid, isDataLoaded, checkSudoku]);\n  function submitScore(username, time) {\n    console.log({\n      username,\n      time\n    }); // Add this line to debug\n    fetch('http://localhost:3000/submit', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        time\n      })\n    }).then(response => response.json()).then(data => console.log('Score submitted:', data)).catch(error => console.error('Error submitting score:', error));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"SudokuView\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Timer: \", timer, \" sekunder\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: grid.map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((value, j) => /*#__PURE__*/_jsxDEV(\"td\", {\n            className: !validity[i][j] ? 'invalid' : '',\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: `${!validity[i][j] ? 'invalid-input' : ''} ${userEdits[i][j] ? 'user-input' : ''}`,\n              value: value === 0 ? '' : value,\n              onChange: event => handleInputChange(event, i, j),\n              readOnly: !editableCells[i][j]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 19\n            }, this)\n          }, j, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 17\n          }, this))\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n_s(SudokuView, \"nGfNopF2YWcOxeFUFbV066SoRpI=\", false, function () {\n  return [useNavigate];\n});\n_c = SudokuView;\nexport default SudokuView;\nvar _c;\n$RefreshReg$(_c, \"SudokuView\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useContext","isValidSudoku","fetchNewBoard","UserContext","useNavigate","jsxDEV","_jsxDEV","SudokuView","_s","grid","setGrid","validity","setValidity","Array","fill","map","isDataLoaded","setIsDataLoaded","editableCells","setEditableCells","userEdits","setUserEdits","timer","setTimer","isTimerActive","setIsTimerActive","username","navigate","interval","setInterval","prevTimer","clearInterval","handleInputChange","event","i","j","value","target","test","numValue","parseInt","newGrid","row","rowIndex","cell","cellIndex","newUserEdits","checkSudoku","isValid","newValidity","isFullyFilled","every","alert","submitScore","time","console","log","fetch","method","headers","body","JSON","stringify","then","response","json","data","catch","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","readOnly","_c","$RefreshReg$"],"sources":["C:/Users/marti/OneDrive/Skrivebord/Fagprojekt/Fagprojekt-/my-app/frontEnd/src/SudokuView.js"],"sourcesContent":["import React, { useState, useEffect, useCallback,useContext } from 'react';\r\nimport './CSS/SudokuView.css';\r\nimport { isValidSudoku } from './sudokuUtils';\r\nimport { fetchNewBoard } from './fetchNewBoard';\r\nimport UserContext from './UserContext';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n\r\nfunction SudokuView() {\r\n  const [grid, setGrid] = useState([]);\r\n  const [validity, setValidity] = useState(Array(9).fill().map(() => Array(9).fill(true)));\r\n  const [isDataLoaded, setIsDataLoaded] = useState(false);\r\n  const [editableCells, setEditableCells] = useState([]);\r\n  const [userEdits, setUserEdits] = useState(Array(9).fill().map(() => Array(9).fill(false)));\r\n  const [timer, setTimer] = useState(0);\r\n  const [isTimerActive, setIsTimerActive] = useState(false);\r\n  const { username } = useContext(UserContext);\r\n  const navigate = useNavigate();\r\n\r\n  // Henter et nyt board fra serveren \r\n  useEffect(() => {\r\n    fetchNewBoard({\r\n      setGrid,\r\n      setEditableCells,\r\n      setUserEdits,\r\n      setValidity,\r\n      setIsDataLoaded,\r\n      setTimer,\r\n      setIsTimerActive\r\n    });\r\n  }, []);\r\n\r\n  // Timer logik \r\n  useEffect(() => {\r\n    let interval = null;\r\n    if (isTimerActive) {\r\n      interval = setInterval(() => {\r\n        setTimer(prevTimer => prevTimer + 1);\r\n      }, 1000);\r\n    } else {\r\n      clearInterval(interval);\r\n    }\r\n    return () => clearInterval(interval);\r\n  }, [isTimerActive]);\r\n  \r\n  // Håndterer input fra brugeren\r\n  const handleInputChange = useCallback((event, i, j) => {\r\n    if (!editableCells[i][j]) {\r\n      return;\r\n    }\r\n    const value = event.target.value;\r\n    // Tjekker om input er gyldigt \r\n    if (value === '' || (/^\\d+$/.test(value) && value >= 1 && value <= 9)) {\r\n      const numValue = value === '' ? 0 : parseInt(value, 10);\r\n      const newGrid = grid.map((row, rowIndex) =>\r\n        row.map((cell, cellIndex) => rowIndex === i && cellIndex === j ? numValue : cell)\r\n      );\r\n      setGrid(newGrid);\r\n\r\n      const newUserEdits = [...userEdits];\r\n      newUserEdits[i][j] = true;\r\n      setUserEdits(newUserEdits);\r\n    }\r\n  }, [editableCells, grid, userEdits]);\r\n\r\n  // Tjekker om Sudoku er løst\r\n  const checkSudoku = useCallback(() => {\r\n    if (!isDataLoaded) return;\r\n    const { isValid, newValidity } = isValidSudoku(grid);\r\n    setValidity(newValidity);\r\n    // Tjekker om brættet er fuldt udfyldt og gyldigt\r\n    const isFullyFilled = grid.every(row => row.every(value => value !== 0));\r\n    if (isValid && isFullyFilled) {\r\n      alert(`Congratulations! You've solved the Sudoku in ${timer} seconds!`);\r\n      setIsTimerActive(false);\r\n      submitScore(username, timer);\r\n      navigate('/'); \r\n\r\n    }\r\n  }, [grid, isDataLoaded, timer, username,navigate]);\r\n\r\n  useEffect(() => {\r\n    if (isDataLoaded) {\r\n      checkSudoku();\r\n    }\r\n  }, [grid, isDataLoaded, checkSudoku]);\r\n\r\n\r\n  function submitScore(username, time) {\r\n    console.log({ username, time }); // Add this line to debug\r\n    fetch('http://localhost:3000/submit', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        username,\r\n        time,\r\n      }),\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => console.log('Score submitted:', data))\r\n    .catch(error => console.error('Error submitting score:', error));\r\n  }\r\n\r\n  return (\r\n    <div className=\"SudokuView\">\r\n      <div>Timer: {timer} sekunder</div>\r\n      <table className=\"center\">\r\n        <tbody>\r\n          {grid.map((row, i) => (\r\n            <tr key={i}>\r\n              {row.map((value, j) => (\r\n                <td key={j} className={!validity[i][j] ? 'invalid' : ''}>\r\n                  <input\r\n                    type=\"text\"\r\n                    className={`${!validity[i][j] ? 'invalid-input' : ''} ${userEdits[i][j] ? 'user-input' : ''}`}\r\n                    value={value === 0 ? '' : value}\r\n                    onChange={(event) => handleInputChange(event, i, j)}\r\n                    readOnly={!editableCells[i][j]}\r\n                  />\r\n                </td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SudokuView;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}