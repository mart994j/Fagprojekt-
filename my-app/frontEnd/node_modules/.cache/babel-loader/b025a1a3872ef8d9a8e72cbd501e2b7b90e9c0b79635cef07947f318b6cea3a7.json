{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\n\n// Custom hook for managing Sudoku board and note mode\nexport const sudokuNotes = initialBoardState => {\n  _s();\n  const [board, setBoard] = useState(initialBoardState);\n  const [noteMode, setNoteMode] = useState(false);\n  const toggleNoteMode = () => {\n    setNoteMode(!noteMode);\n  };\n  const handleCellInput = (rowIndex, colIndex, value) => {\n    setBoard(currentBoard => {\n      const newBoard = [...currentBoard];\n      const cell = {\n        ...newBoard[rowIndex][colIndex]\n      };\n      if (noteMode) {\n        // Logic for adding/removing notes\n        const notes = new Set(cell.notes || []);\n        if (notes.has(value)) {\n          notes.delete(value);\n        } else {\n          notes.add(value);\n        }\n        cell.notes = Array.from(notes);\n      } else {\n        // Logic for setting the cell's value\n        cell.value = value;\n      }\n      newBoard[rowIndex][colIndex] = cell;\n      return newBoard;\n    });\n  };\n  return {\n    board,\n    noteMode,\n    toggleNoteMode,\n    handleCellInput\n  };\n};\n_s(sudokuNotes, \"a12ay+80rQF9TN+ylfq+zUI7qSo=\");","map":{"version":3,"names":["useState","sudokuNotes","initialBoardState","_s","board","setBoard","noteMode","setNoteMode","toggleNoteMode","handleCellInput","rowIndex","colIndex","value","currentBoard","newBoard","cell","notes","Set","has","delete","add","Array","from"],"sources":["/Users/sebastianwulf-andersen/Documents/Fagprojekt-/my-app/frontEnd/src/sudokuNotes.js"],"sourcesContent":["import { useState } from 'react';\n\n// Custom hook for managing Sudoku board and note mode\nexport const sudokuNotes = (initialBoardState) => {\n  const [board, setBoard] = useState(initialBoardState);\n  const [noteMode, setNoteMode] = useState(false);\n\n  const toggleNoteMode = () => {\n    setNoteMode(!noteMode);\n  };\n\n  const handleCellInput = (rowIndex, colIndex, value) => {\n    setBoard(currentBoard => {\n      const newBoard = [...currentBoard];\n      const cell = { ...newBoard[rowIndex][colIndex] };\n\n      if (noteMode) {\n        // Logic for adding/removing notes\n        const notes = new Set(cell.notes || []);\n        if (notes.has(value)) {\n          notes.delete(value);\n        } else {\n          notes.add(value);\n        }\n        cell.notes = Array.from(notes);\n      } else {\n        // Logic for setting the cell's value\n        cell.value = value;\n      }\n\n      newBoard[rowIndex][colIndex] = cell;\n      return newBoard;\n    });\n  };\n\n  return { board, noteMode, toggleNoteMode, handleCellInput };\n};\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;;AAEhC;AACA,OAAO,MAAMC,WAAW,GAAIC,iBAAiB,IAAK;EAAAC,EAAA;EAChD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAACE,iBAAiB,CAAC;EACrD,MAAM,CAACI,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAE/C,MAAMQ,cAAc,GAAGA,CAAA,KAAM;IAC3BD,WAAW,CAAC,CAACD,QAAQ,CAAC;EACxB,CAAC;EAED,MAAMG,eAAe,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,KAAK,KAAK;IACrDP,QAAQ,CAACQ,YAAY,IAAI;MACvB,MAAMC,QAAQ,GAAG,CAAC,GAAGD,YAAY,CAAC;MAClC,MAAME,IAAI,GAAG;QAAE,GAAGD,QAAQ,CAACJ,QAAQ,CAAC,CAACC,QAAQ;MAAE,CAAC;MAEhD,IAAIL,QAAQ,EAAE;QACZ;QACA,MAAMU,KAAK,GAAG,IAAIC,GAAG,CAACF,IAAI,CAACC,KAAK,IAAI,EAAE,CAAC;QACvC,IAAIA,KAAK,CAACE,GAAG,CAACN,KAAK,CAAC,EAAE;UACpBI,KAAK,CAACG,MAAM,CAACP,KAAK,CAAC;QACrB,CAAC,MAAM;UACLI,KAAK,CAACI,GAAG,CAACR,KAAK,CAAC;QAClB;QACAG,IAAI,CAACC,KAAK,GAAGK,KAAK,CAACC,IAAI,CAACN,KAAK,CAAC;MAChC,CAAC,MAAM;QACL;QACAD,IAAI,CAACH,KAAK,GAAGA,KAAK;MACpB;MAEAE,QAAQ,CAACJ,QAAQ,CAAC,CAACC,QAAQ,CAAC,GAAGI,IAAI;MACnC,OAAOD,QAAQ;IACjB,CAAC,CAAC;EACJ,CAAC;EAED,OAAO;IAAEV,KAAK;IAAEE,QAAQ;IAAEE,cAAc;IAAEC;EAAgB,CAAC;AAC7D,CAAC;AAACN,EAAA,CAjCWF,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}