{"ast":null,"code":"export const isValidSudoku = (grid, n = 9) => {\n  let newValidity = Array(n).fill().map(() => Array(n).fill(true));\n  let isValid = true;\n\n  // Track first occurrences of values in rows, columns, and boxes\n  let firstOccurrencesRows = Array(n).fill().map(() => ({}));\n  let firstOccurrencesCols = Array(n).fill().map(() => ({}));\n  let firstOccurrencesBoxes = Array(n).fill().map(() => ({}));\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      const val = grid[i][j];\n      if (val) {\n        // Check rows\n        if (val in firstOccurrencesRows[i]) {\n          newValidity[i][j] = false;\n          const originalPos = firstOccurrencesRows[i][val];\n          newValidity[originalPos[0]][originalPos[1]] = false;\n        } else {\n          firstOccurrencesRows[i][val] = [i, j];\n        }\n\n        // Check columns\n        if (val in firstOccurrencesCols[j]) {\n          newValidity[i][j] = false;\n          const originalPos = firstOccurrencesCols[j][val];\n          newValidity[originalPos[0]][originalPos[1]] = false;\n        } else {\n          firstOccurrencesCols[j][val] = [i, j];\n        }\n\n        // Calculate box index with respect to k and n\n        const boxIndex = Math.floor(i / k) * k + Math.floor(j / k);\n        // Check boxes\n        if (val in firstOccurrencesBoxes[boxIndex]) {\n          newValidity[i][j] = false;\n          const originalPos = firstOccurrencesBoxes[boxIndex][val];\n          newValidity[originalPos[0]][originalPos[1]] = false;\n        } else {\n          firstOccurrencesBoxes[boxIndex][val] = [i, j];\n        }\n      }\n    }\n  }\n\n  // Check if any cell is marked as invalid\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (!newValidity[i][j]) {\n        isValid = false;\n        break;\n      }\n    }\n    if (!isValid) break;\n  }\n  return {\n    isValid,\n    newValidity\n  };\n};","map":{"version":3,"names":["isValidSudoku","grid","n","newValidity","Array","fill","map","isValid","firstOccurrencesRows","firstOccurrencesCols","firstOccurrencesBoxes","i","j","val","originalPos","boxIndex","Math","floor","k"],"sources":["C:/Users/marti/OneDrive/Skrivebord/Fagprojekt/Fagprojekt-/my-app/frontEnd/src/sudokuUtils.js"],"sourcesContent":["export const isValidSudoku = (grid,n=9) => {\r\n  let newValidity = Array(n).fill().map(() => Array(n).fill(true));\r\n    let isValid = true;\r\n  \r\n    // Track first occurrences of values in rows, columns, and boxes\r\n    let firstOccurrencesRows = Array(n).fill().map(() => ({}));\r\n    let firstOccurrencesCols = Array(n).fill().map(() => ({}));\r\n    let firstOccurrencesBoxes = Array(n).fill().map(() => ({}));\r\n  \r\n    for (let i = 0; i < n; i++) {\r\n      for (let j = 0; j < n; j++) {\r\n        const val = grid[i][j];\r\n        if (val) {\r\n          // Check rows\r\n          if (val in firstOccurrencesRows[i]) {\r\n            newValidity[i][j] = false;\r\n            const originalPos = firstOccurrencesRows[i][val];\r\n            newValidity[originalPos[0]][originalPos[1]] = false;\r\n          } else {\r\n            firstOccurrencesRows[i][val] = [i, j];\r\n          }\r\n  \r\n          // Check columns\r\n          if (val in firstOccurrencesCols[j]) {\r\n            newValidity[i][j] = false;\r\n            const originalPos = firstOccurrencesCols[j][val];\r\n            newValidity[originalPos[0]][originalPos[1]] = false;\r\n          } else {\r\n            firstOccurrencesCols[j][val] = [i, j];\r\n          }\r\n  \r\n          // Calculate box index with respect to k and n\r\n          const boxIndex = Math.floor(i / k) * k + Math.floor(j / k);\r\n          // Check boxes\r\n          if (val in firstOccurrencesBoxes[boxIndex]) {\r\n            newValidity[i][j] = false;\r\n            const originalPos = firstOccurrencesBoxes[boxIndex][val];\r\n            newValidity[originalPos[0]][originalPos[1]] = false;\r\n          } else {\r\n            firstOccurrencesBoxes[boxIndex][val] = [i, j];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  \r\n    // Check if any cell is marked as invalid\r\n    for (let i = 0; i < n; i++) {\r\n      for (let j = 0; j < n; j++) {\r\n        if (!newValidity[i][j]) {\r\n          isValid = false;\r\n          break;\r\n        }\r\n      }\r\n      if (!isValid) break;\r\n    }\r\n\r\n    return { isValid, newValidity };\r\n  };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}