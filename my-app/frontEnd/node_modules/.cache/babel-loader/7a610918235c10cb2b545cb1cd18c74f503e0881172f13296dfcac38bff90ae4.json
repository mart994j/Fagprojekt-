{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marti\\\\OneDrive\\\\Skrivebord\\\\Fagprojekt\\\\Fagprojekt-\\\\my-app\\\\src\\\\SudokuView.js\",\n  _s = $RefreshSig$();\n//npm start\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport SudokuGenerator from './SudokuGenerator';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SudokuView() {\n  _s();\n  // Initialize a 9x9 grid with some predefined numbers\n  const [grid, setGrid] = useState(Array(9).fill().map(() => Array(9).fill(0)));\n  const handleInputChange = (event, i, j) => {\n    const value = event.target.value;\n    // Check if the input is a valid number or an empty string\n    if (value === '' || /^\\d+$/.test(value) && value >= 0 && value <= 9) {\n      const numValue = value === '' ? 0 : parseInt(value, 10); // Convert input to number or reset to 0 if empty\n\n      // Create a new grid with the updated value\n      const newGrid = grid.map((row, rowIndex) => row.map((cell, cellIndex) => rowIndex === i && cellIndex === j ? numValue : cell));\n      setGrid(newGrid);\n    }\n    // If the input is not valid (letters or invalid characters), do nothing\n  };\n  const isValidSudoku = () => {\n    for (let i = 0; i < 9; i++) {\n      const row = new Set();\n      const col = new Set();\n      const box = new Set();\n      for (let j = 0; j < 9; j++) {\n        const valueRow = grid[i][j];\n        const valueCol = grid[j][i];\n        const valueBox = grid[3 * Math.floor(i / 3) + Math.floor(j / 3)][3 * (i % 3) + j % 3];\n        if (valueRow > 0 && row.has(valueRow) || valueCol > 0 && col.has(valueCol) || valueBox > 0 && box.has(valueBox)) {\n          return 'Invalid Sudoku'; // Set the validation message to 'Invalid Sudoku'\n        }\n        row.add(valueRow);\n        col.add(valueCol);\n        box.add(valueBox);\n      }\n    }\n    return 'Valid Sudoku'; // Set the validation message to 'Valid Sudoku'\n  };\n  const checkSudoku = () => {\n    alert(isValidSudoku()); // Display the validation message in an alert\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"SodukoView\",\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: grid.map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((value, j) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: value === 0 ? '' : value,\n              onChange: event => handleInputChange(event, i, j)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 19\n            }, this)\n          }, j, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 17\n          }, this))\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: checkSudoku,\n      children: \"Check Sudoku\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(SudokuView, \"UO9kEDCEyivSzr35DDcnp68a9bM=\");\n_c = SudokuView;\nexport default SudokuView;\nvar _c;\n$RefreshReg$(_c, \"SudokuView\");","map":{"version":3,"names":["React","useState","SudokuGenerator","jsxDEV","_jsxDEV","SudokuView","_s","grid","setGrid","Array","fill","map","handleInputChange","event","i","j","value","target","test","numValue","parseInt","newGrid","row","rowIndex","cell","cellIndex","isValidSudoku","Set","col","box","valueRow","valueCol","valueBox","Math","floor","has","add","checkSudoku","alert","className","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/marti/OneDrive/Skrivebord/Fagprojekt/Fagprojekt-/my-app/src/SudokuView.js"],"sourcesContent":["//npm start\r\n\r\nimport React, { useState } from 'react';\r\nimport './App.css';\r\nimport SudokuGenerator from './SudokuGenerator';\r\n\r\n\r\n\r\nfunction SudokuView() {\r\n  // Initialize a 9x9 grid with some predefined numbers\r\n  const [grid, setGrid] = useState(Array(9).fill().map(() => Array(9).fill(0)));\r\n\r\n  const handleInputChange = (event, i, j) => {\r\n    const value = event.target.value;\r\n    // Check if the input is a valid number or an empty string\r\n    if (value === '' || (/^\\d+$/.test(value) && value >= 0 && value <= 9)) {\r\n      const numValue = value === '' ? 0 : parseInt(value, 10); // Convert input to number or reset to 0 if empty\r\n  \r\n      // Create a new grid with the updated value\r\n      const newGrid = grid.map((row, rowIndex) =>\r\n        row.map((cell, cellIndex) =>\r\n          rowIndex === i && cellIndex === j ? numValue : cell\r\n        )\r\n      );\r\n  \r\n      setGrid(newGrid);\r\n    }\r\n    // If the input is not valid (letters or invalid characters), do nothing\r\n  };\r\n  const isValidSudoku = () => {\r\n    for (let i = 0; i < 9; i++) {\r\n      const row = new Set();\r\n      const col = new Set();\r\n      const box = new Set();\r\n\r\n      for (let j = 0; j < 9; j++) {\r\n        const valueRow = grid[i][j];\r\n        const valueCol = grid[j][i];\r\n        const valueBox = grid[3 * Math.floor(i / 3) + Math.floor(j / 3)][3 * (i % 3) + (j % 3)];\r\n\r\n        if ((valueRow > 0 && row.has(valueRow)) || (valueCol > 0 && col.has(valueCol)) || (valueBox > 0 && box.has(valueBox))) {\r\n          return 'Invalid Sudoku'; // Set the validation message to 'Invalid Sudoku'\r\n          \r\n        }\r\n\r\n        row.add(valueRow);\r\n        col.add(valueCol);\r\n        box.add(valueBox);\r\n      }\r\n    }\r\n\r\n    return 'Valid Sudoku'; // Set the validation message to 'Valid Sudoku'\r\n  };\r\n  \r\n  const checkSudoku = () => {\r\n    alert(isValidSudoku()); // Display the validation message in an alert\r\n  };\r\n\r\n  return (\r\n    <div className=\"SodukoView\">\r\n      <table className=\"center\">\r\n        <tbody>\r\n          {grid.map((row, i) => (\r\n            <tr key={i}>\r\n              {row.map((value, j) => (\r\n                <td key={j}>\r\n                  <input \r\n                    type=\"text\" \r\n                    value={value === 0 ? '' : value} \r\n                    onChange={event => handleInputChange(event, i, j)} \r\n                  />\r\n                </td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <button onClick={checkSudoku}>Check Sudoku</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SudokuView;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}