{"ast":null,"code":"var _jsxFileName = \"/Users/sebastianwulf-andersen/Documents/Fagprojekt-/my-app/frontEnd/src/SudokuView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './SudokuView.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SudokuView() {\n  _s();\n  const [grid, setGrid] = useState([]);\n  const [invalidCells, setInvalidCells] = useState([]);\n  useEffect(() => {\n    // Hent et nyt Sudoku bræt fra backenden\n    fetch('http://localhost:3000/generate').then(response => response.json()).then(data => setGrid(data.board)).catch(error => console.error('Error fetching data: ', error));\n  }, []);\n  const handleInputChange = (event, i, j) => {\n    const value = event.target.value;\n    // Ensure the input is a number between 1 and 9 or empty\n    if (value === '' || /^\\d+$/.test(value) && value >= 1 && value <= 9) {\n      const numValue = value === '' ? 0 : parseInt(value, 10); // Convert to number\n\n      // Create a new copy of the grid and update the value of the selected cell\n      const newGrid = grid.map((row, rowIndex) => row.map((cell, cellIndex) => rowIndex === i && cellIndex === j ? numValue : cell));\n      setGrid(newGrid); // Update the grid state\n\n      // Call backend to validate the updated grid\n      fetch('http://localhost:3000/validate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          board: newGrid\n        })\n      }).then(response => response.json()).then(data => {\n        if (!data.isValid) {\n          setInvalidCells(data.invalidCells);\n        } else {\n          setInvalidCells([]);\n        }\n      }).catch(error => console.error('Error validating data: ', error));\n    }\n  };\n  const isValidSudoku = () => {\n    for (let i = 0; i < 9; i++) {\n      const row = new Set();\n      const col = new Set();\n      //box er en 3x3 matrix\n      const box = new Set();\n      for (let j = 0; j < 9; j++) {\n        // tjek værdier i række, kolonne og boks\n        const valueRow = grid[i][j];\n        const valueCol = grid[j][i];\n        const valueBox = grid[3 * Math.floor(i / 3) + Math.floor(j / 3)][3 * (i % 3) + j % 3];\n        // tjek om værdien allerede findes i række, kolonne eller boks\n        if (valueRow > 0 && row.has(valueRow) || valueCol > 0 && col.has(valueCol) || valueBox > 0 && box.has(valueBox)) {\n          return 'Invalid Sudoku';\n        }\n        // tilføj værdier til række, kolonne og boks\n        row.add(valueRow);\n        col.add(valueCol);\n        box.add(valueBox);\n      }\n    }\n    // hvis ingen værdier er blevet fundet, så er det en valid sudoku\n    return 'Valid Sudoku';\n  };\n  // tjek om sudoku er valid\n  const checkSudoku = () => {\n    alert(isValidSudoku()); //vis alert med resultat\n  };\n  const isInvalid = (i, j) => invalidCells.some(cell => cell.row === i && cell.col === j);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"SudokuView\",\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: grid.map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((value, j) =>\n          /*#__PURE__*/\n          // Inline conditional class application\n          _jsxDEV(\"td\", {\n            className: isInvalid(i, j) ? 'invalid-cell' : '',\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"sudoku-input\" // You can add a base class for styling all inputs\n              ,\n              value: value === 0 ? '' : value,\n              onChange: event => handleInputChange(event, i, j)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 19\n            }, this)\n          }, j, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 17\n          }, this))\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button-blue\",\n      onClick: checkSudoku,\n      children: \"Check Sudoku\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(SudokuView, \"LUKH7U0kWMgFcoMmLGbsXR16gU8=\");\n_c = SudokuView;\nexport default SudokuView;\nvar _c;\n$RefreshReg$(_c, \"SudokuView\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SudokuView","_s","grid","setGrid","invalidCells","setInvalidCells","fetch","then","response","json","data","board","catch","error","console","handleInputChange","event","i","j","value","target","test","numValue","parseInt","newGrid","map","row","rowIndex","cell","cellIndex","method","headers","body","JSON","stringify","isValid","isValidSudoku","Set","col","box","valueRow","valueCol","valueBox","Math","floor","has","add","checkSudoku","alert","isInvalid","some","className","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/sebastianwulf-andersen/Documents/Fagprojekt-/my-app/frontEnd/src/SudokuView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './SudokuView.css';\n\nfunction SudokuView() {\n  const [grid, setGrid] = useState([]);\n  const [invalidCells, setInvalidCells] = useState([]);\n\n  useEffect(() => {\n    // Hent et nyt Sudoku bræt fra backenden\n    fetch('http://localhost:3000/generate')\n      .then(response => response.json())\n      .then(data => setGrid(data.board))\n      .catch(error => console.error('Error fetching data: ', error));\n  }, []);\n\n  const handleInputChange = (event, i, j) => {\n    const value = event.target.value;\n    // Ensure the input is a number between 1 and 9 or empty\n    if (value === '' || (/^\\d+$/.test(value) && value >= 1 && value <= 9)) {\n      const numValue = value === '' ? 0 : parseInt(value, 10); // Convert to number\n  \n      // Create a new copy of the grid and update the value of the selected cell\n      const newGrid = grid.map((row, rowIndex) =>\n        row.map((cell, cellIndex) =>\n          rowIndex === i && cellIndex === j ? numValue : cell\n        )\n      );\n  \n      setGrid(newGrid); // Update the grid state\n  \n      // Call backend to validate the updated grid\n      fetch('http://localhost:3000/validate', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ board: newGrid }),\n      })\n      .then(response => response.json())\n      .then(data => {\n        if (!data.isValid) {\n          setInvalidCells(data.invalidCells);\n        } else {\n          setInvalidCells([]);\n        }\n      })\n      .catch(error => console.error('Error validating data: ', error));\n    }\n  };\n\n  const isValidSudoku = () => {\n    for (let i = 0; i < 9; i++) {\n      const row = new Set();\n      const col = new Set();\n      //box er en 3x3 matrix\n      const box = new Set();\n\n      for (let j = 0; j < 9; j++) {\n        // tjek værdier i række, kolonne og boks\n        const valueRow = grid[i][j];\n        const valueCol = grid[j][i];\n        const valueBox = grid[3 * Math.floor(i / 3) + Math.floor(j / 3)][3 * (i % 3) + (j % 3)];\n        // tjek om værdien allerede findes i række, kolonne eller boks\n        if ((valueRow > 0 && row.has(valueRow)) || (valueCol > 0 && col.has(valueCol)) || (valueBox > 0 && box.has(valueBox))) {\n          return 'Invalid Sudoku';\n        }\n        // tilføj værdier til række, kolonne og boks\n        row.add(valueRow);\n        col.add(valueCol);\n        box.add(valueBox);\n      }\n    }\n    // hvis ingen værdier er blevet fundet, så er det en valid sudoku\n    return 'Valid Sudoku';\n  };\n  // tjek om sudoku er valid\n  const checkSudoku = () => {\n    alert(isValidSudoku()); //vis alert med resultat\n  };\n\n  const isInvalid = (i, j) => invalidCells.some(cell => cell.row === i && cell.col === j);\n\n  return (\n    <div className=\"SudokuView\">\n      <table className=\"center\">\n        <tbody>\n          {grid.map((row, i) => (\n            <tr key={i}>\n              {row.map((value, j) => (\n                // Inline conditional class application\n                <td key={j} className={isInvalid(i, j) ? 'invalid-cell' : ''}>\n                  <input\n                    type=\"text\"\n                    className=\"sudoku-input\" // You can add a base class for styling all inputs\n                    value={value === 0 ? '' : value}\n                    onChange={(event) => handleInputChange(event, i, j)}\n                  />\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n  \n      <button\n        className=\"button-blue\"\n        onClick={checkSudoku}>\n          Check Sudoku\n      </button>\n    </div>\n  );\n}\n\nexport default SudokuView;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}