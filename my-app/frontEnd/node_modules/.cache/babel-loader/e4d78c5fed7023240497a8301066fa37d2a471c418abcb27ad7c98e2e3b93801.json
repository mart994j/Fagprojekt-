{"ast":null,"code":"export class SudokuGenerator {\n  static generateBoard() {\n    let board = Array.from({\n      length: 9\n    }, () => Array(9).fill(0));\n    this.fillBoard(board);\n    return board;\n  }\n  static fillBoard(board) {\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        if (board[i][j] === 0) {\n          const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9].sort(() => Math.random() - 0.5);\n          for (let num of numbers) {\n            if (this.isValidPlacement(board, i, j, num)) {\n              board[i][j] = num;\n              if (this.fillBoard(board)) {\n                return true;\n              } else {\n                board[i][j] = 0;\n              }\n            }\n          }\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  static isValidPlacement(board, row, col, num) {\n    for (let i = 0; i < 9; i++) {\n      const m = 3 * Math.floor(row / 3) + Math.floor(i / 3);\n      const n = 3 * Math.floor(col / 3) + i % 3;\n      if (board[row][i] === num || board[i][col] === num || board[m][n] === num) {\n        return false;\n      }\n    }\n    return true;\n  }\n  static removeNumbers(board, holes) {\n    let attempts = holes;\n    while (attempts > 0) {\n      let row = Math.floor(Math.random() * 9);\n      let col = Math.floor(Math.random() * 9);\n      if (board[row][col] !== 0) {\n        board[row][col] = 0;\n        attempts--;\n      }\n    }\n  }\n}","map":{"version":3,"names":["SudokuGenerator","generateBoard","board","Array","from","length","fill","fillBoard","i","j","numbers","sort","Math","random","num","isValidPlacement","row","col","m","floor","n","removeNumbers","holes","attempts"],"sources":["C:/Users/marti/OneDrive/Skrivebord/Fagprojekt/Fagprojekt-/my-app/src/SudokuGenerator.js"],"sourcesContent":["export class SudokuGenerator {\r\n    static generateBoard() {\r\n      let board = Array.from({length: 9}, () => Array(9).fill(0));\r\n      this.fillBoard(board);\r\n      return board;\r\n    }\r\n  \r\n    static fillBoard(board) {\r\n      for (let i = 0; i < 9; i++) {\r\n        for (let j = 0; j < 9; j++) {\r\n          if (board[i][j] === 0) {\r\n            const numbers = [1,2,3,4,5,6,7,8,9].sort(() => Math.random() - 0.5);\r\n            for (let num of numbers) {\r\n              if (this.isValidPlacement(board, i, j, num)) {\r\n                board[i][j] = num;\r\n                if (this.fillBoard(board)) {\r\n                  return true;\r\n                } else {\r\n                  board[i][j] = 0;\r\n                }\r\n              }\r\n            }\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n  \r\n    static isValidPlacement(board, row, col, num) {\r\n      for (let i = 0; i < 9; i++) {\r\n        const m = 3 * Math.floor(row / 3) + Math.floor(i / 3);\r\n        const n = 3 * Math.floor(col / 3) + i % 3;\r\n        if (board[row][i] === num || board[i][col] === num || board[m][n] === num) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n  \r\n    static removeNumbers(board, holes) {\r\n      let attempts = holes;\r\n      while (attempts > 0) {\r\n        let row = Math.floor(Math.random() * 9);\r\n        let col = Math.floor(Math.random() * 9);\r\n        if (board[row][col] !== 0) {\r\n          board[row][col] = 0;\r\n          attempts--;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}