{"ast":null,"code":"var _jsxFileName = \"/Users/sebastianwulf-andersen/Documents/Fagprojekt-/my-app/frontEnd/src/Screens/SudokuView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './src/SudokuView.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SudokuView() {\n  _s();\n  const [grid, setGrid] = useState([]);\n  const [validity, setValidity] = useState(Array(9).fill().map(() => Array(9).fill(true)));\n\n  //sætter editableCells til at være et tomt array\n  const [editableCells, setEditableCells] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:3000/generate').then(response => response.json()).then(data => {\n      setGrid(data.board);\n      // Initialize editableCells based on whether the cell value is 0\n      const editable = data.board.map(row => row.map(value => value === 0));\n      setEditableCells(editable);\n    }).catch(error => console.error('Error fetching data: ', error));\n  }, []);\n  const handleInputChange = (event, i, j) => {\n    if (!editableCells[i][j]) {\n      // hvis cellen ikke er redigerbar, gør intet\n      return;\n    }\n    const value = event.target.value;\n    if (value === '' || /^\\d+$/.test(value) && value >= 1 && value <= 9) {\n      const numValue = value === '' ? 0 : parseInt(value, 10); // convert to number\n\n      const newGrid = grid.map((row, rowIndex) => row.map((cell, cellIndex) => rowIndex === i && cellIndex === j ? numValue : cell));\n      setGrid(newGrid);\n    }\n    //hvis input ikke er gyldigt, gør intet og returner tilbage til inputfeltet og \n  };\n  const isValidSudoku = () => {\n    let newValidity = Array(9).fill().map(() => Array(9).fill(true));\n    let isValid = true;\n\n    // Track first occurrences of values in rows, columns, and boxes\n    let firstOccurrencesRows = Array(9).fill().map(() => ({}));\n    let firstOccurrencesCols = Array(9).fill().map(() => ({}));\n    let firstOccurrencesBoxes = Array(9).fill().map(() => ({}));\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        const val = grid[i][j];\n        if (val) {\n          // Check rows\n          if (val in firstOccurrencesRows[i]) {\n            // Mark both the original and the duplicate as invalid\n            newValidity[i][j] = false;\n            const originalPos = firstOccurrencesRows[i][val];\n            newValidity[originalPos[0]][originalPos[1]] = false;\n          } else {\n            firstOccurrencesRows[i][val] = [i, j];\n          }\n\n          // Check columns\n          if (val in firstOccurrencesCols[j]) {\n            // Mark both the original and the duplicate as invalid\n            newValidity[i][j] = false;\n            const originalPos = firstOccurrencesCols[j][val];\n            newValidity[originalPos[0]][originalPos[1]] = false;\n          } else {\n            firstOccurrencesCols[j][val] = [i, j];\n          }\n\n          // Calculate box index\n          const boxIndex = 3 * Math.floor(i / 3) + Math.floor(j / 3);\n          // Check boxes\n          if (val in firstOccurrencesBoxes[boxIndex]) {\n            // Mark both the original and the duplicate as invalid\n            newValidity[i][j] = false;\n            const originalPos = firstOccurrencesBoxes[boxIndex][val];\n            newValidity[originalPos[0]][originalPos[1]] = false;\n          } else {\n            firstOccurrencesBoxes[boxIndex][val] = [i, j];\n          }\n        }\n      }\n    }\n    setValidity(newValidity);\n\n    // Check if any cell is marked as invalid\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        if (!newValidity[i][j]) {\n          isValid = false;\n          break;\n        }\n      }\n      if (!isValid) break;\n    }\n    return isValid;\n  };\n  // tjek om sudoku er valid\n  const checkSudoku = () => {\n    alert(isValidSudoku()); //vis alert med resultat\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"SudokuView\",\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: grid.map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((value, j) => /*#__PURE__*/_jsxDEV(\"td\", {\n            className: !validity[i][j] ? 'invalid' : '',\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: !validity[i][j] ? 'invalid-input' : '',\n              value: value === 0 ? '' : value,\n              onChange: event => handleInputChange(event, i, j),\n              readOnly: !editableCells[i][j] // Gør inputfeltet ikke-redigerbart, hvis cellen ikke er redigerbar\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 19\n            }, this)\n          }, j, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 17\n          }, this))\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button-blue\",\n      onClick: checkSudoku,\n      children: \"Check Sudoku\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n_s(SudokuView, \"Q8UE+cz+R8veXBblq0TUPhnQRE4=\");\n_c = SudokuView;\nexport default SudokuView;\nvar _c;\n$RefreshReg$(_c, \"SudokuView\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SudokuView","_s","grid","setGrid","validity","setValidity","Array","fill","map","editableCells","setEditableCells","fetch","then","response","json","data","board","editable","row","value","catch","error","console","handleInputChange","event","i","j","target","test","numValue","parseInt","newGrid","rowIndex","cell","cellIndex","isValidSudoku","newValidity","isValid","firstOccurrencesRows","firstOccurrencesCols","firstOccurrencesBoxes","val","originalPos","boxIndex","Math","floor","checkSudoku","alert","className","children","type","onChange","readOnly","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/sebastianwulf-andersen/Documents/Fagprojekt-/my-app/frontEnd/src/Screens/SudokuView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './src/SudokuView.css';\n\n\n\nfunction SudokuView() {\n  const [grid, setGrid] = useState([]);\n  const [validity, setValidity] = useState(Array(9).fill().map(() => Array(9).fill(true)));\n\n  //sætter editableCells til at være et tomt array\n  const [editableCells, setEditableCells] = useState([]);\n\n  useEffect(() => {\n    fetch('http://localhost:3000/generate')\n      .then(response => response.json())\n      .then(data => {\n        setGrid(data.board);\n        // Initialize editableCells based on whether the cell value is 0\n        const editable = data.board.map(row => row.map(value => value === 0));\n        setEditableCells(editable);\n      })\n      .catch(error => console.error('Error fetching data: ', error));\n  }, []);\n\n  const handleInputChange = (event, i, j) => {\n    if (!editableCells[i][j]) {\n      // hvis cellen ikke er redigerbar, gør intet\n      return;\n    }\n    const value = event.target.value;\n    if (value === '' || (/^\\d+$/.test(value) && value >= 1 && value <= 9)) {\n      const numValue = value === '' ? 0 : parseInt(value, 10); // convert to number\n  \n      const newGrid = grid.map((row, rowIndex) =>\n        row.map((cell, cellIndex) =>\n          rowIndex === i && cellIndex === j ? numValue : cell\n        )\n      );\n  \n      setGrid(newGrid);\n    }\n    //hvis input ikke er gyldigt, gør intet og returner tilbage til inputfeltet og \n  };\n  \n\n  const isValidSudoku = () => {\n    let newValidity = Array(9).fill().map(() => Array(9).fill(true)); \n    let isValid = true;\n  \n    // Track first occurrences of values in rows, columns, and boxes\n    let firstOccurrencesRows = Array(9).fill().map(() => ({}));\n    let firstOccurrencesCols = Array(9).fill().map(() => ({}));\n    let firstOccurrencesBoxes = Array(9).fill().map(() => ({}));\n  \n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        const val = grid[i][j];\n        if (val) {\n          // Check rows\n          if (val in firstOccurrencesRows[i]) {\n            // Mark both the original and the duplicate as invalid\n            newValidity[i][j] = false; \n            const originalPos = firstOccurrencesRows[i][val];\n            newValidity[originalPos[0]][originalPos[1]] = false; \n          } else {\n            firstOccurrencesRows[i][val] = [i, j]; \n          }\n  \n          // Check columns\n          if (val in firstOccurrencesCols[j]) {\n            // Mark both the original and the duplicate as invalid\n            newValidity[i][j] = false; \n            const originalPos = firstOccurrencesCols[j][val];\n            newValidity[originalPos[0]][originalPos[1]] = false; \n          } else {\n            firstOccurrencesCols[j][val] = [i, j]; \n          }\n  \n          // Calculate box index\n          const boxIndex = 3 * Math.floor(i / 3) + Math.floor(j / 3);\n          // Check boxes\n          if (val in firstOccurrencesBoxes[boxIndex]) {\n            // Mark both the original and the duplicate as invalid\n            newValidity[i][j] = false; \n            const originalPos = firstOccurrencesBoxes[boxIndex][val];\n            newValidity[originalPos[0]][originalPos[1]] = false; \n          } else {\n            firstOccurrencesBoxes[boxIndex][val] = [i, j]; \n          }\n        }\n      }\n    }\n  \n   \n    setValidity(newValidity);\n    \n    // Check if any cell is marked as invalid\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        if (!newValidity[i][j]) {\n          isValid = false;\n          break;\n        }\n      }\n      if (!isValid) break;\n    }\n  \n    return isValid;\n  };\n  // tjek om sudoku er valid\n  const checkSudoku = () => {\n    alert(isValidSudoku()); //vis alert med resultat\n  };\n  \n\n  return (\n    <div className=\"SudokuView\">\n      <table className=\"center\">\n        <tbody>\n          {grid.map((row, i) => (\n            <tr key={i}>\n              {row.map((value, j) => (\n                <td key={j} className={!validity[i][j] ? 'invalid' : ''}>\n                  <input\n                    type=\"text\"\n                    className={!validity[i][j] ? 'invalid-input' : ''}\n                    value={value === 0 ? '' : value}\n                    onChange={(event) => handleInputChange(event, i, j)}\n                    readOnly={!editableCells[i][j]} // Gør inputfeltet ikke-redigerbart, hvis cellen ikke er redigerbar\n                  />\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n  \n      <button\n        className=\"button-blue\"\n        onClick={checkSudoku}>\n  \n          Check Sudoku\n        \n        </button>\n  \n    </div>\n  );\n}\n\nexport default SudokuView;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}