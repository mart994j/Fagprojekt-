{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marti\\\\OneDrive\\\\Skrivebord\\\\Fagprojekt\\\\Fagprojekt-\\\\my-app\\\\frontEnd\\\\src\\\\SudokuView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './SudokuView.css';\nimport { isValidSudoku } from './sudokuUtils';\nimport { fetchNewBoard } from './fetchNewBoard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SudokuView() {\n  _s();\n  const [grid, setGrid] = useState([]);\n  const [validity, setValidity] = useState(Array(9).fill().map(() => Array(9).fill(true)));\n  const [isDataLoaded, setIsDataLoaded] = useState(false);\n  const [editableCells, setEditableCells] = useState([]);\n  const [userEdits, setUserEdits] = useState(Array(9).fill().map(() => Array(9).fill(false)));\n  const [timer, setTimer] = useState(0);\n  const [isTimerActive, setIsTimerActive] = useState(false);\n\n  // Henter et nyt board fra serveren \n  useEffect(() => {\n    fetchNewBoard({\n      setGrid,\n      setEditableCells,\n      setUserEdits,\n      setValidity,\n      setIsDataLoaded,\n      setTimer,\n      setIsTimerActive\n    });\n  }, []);\n\n  // Timer logik \n  useEffect(() => {\n    let interval = null;\n    if (isTimerActive) {\n      interval = setInterval(() => {\n        setTimer(prevTimer => prevTimer + 1);\n      }, 1000);\n    } else {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [isTimerActive]);\n\n  // Håndterer input fra brugeren\n  const handleInputChange = useCallback((event, i, j) => {\n    if (!editableCells[i][j]) {\n      return;\n    }\n    const value = event.target.value;\n    // Tjekker om input er gyldigt \n    if (value === '' || /^\\d+$/.test(value) && value >= 1 && value <= 9) {\n      const numValue = value === '' ? 0 : parseInt(value, 10);\n      const newGrid = grid.map((row, rowIndex) => row.map((cell, cellIndex) => rowIndex === i && cellIndex === j ? numValue : cell));\n      setGrid(newGrid);\n      const newUserEdits = [...userEdits];\n      newUserEdits[i][j] = true;\n      setUserEdits(newUserEdits);\n    }\n  }, [editableCells, grid, userEdits]);\n\n  // Tjekker om Sudoku er løst\n  const checkSudoku = useCallback(() => {\n    if (!isDataLoaded) return;\n    const {\n      isValid,\n      newValidity\n    } = isValidSudoku(grid);\n    setValidity(newValidity);\n    // Tjekker om brættet er fuldt udfyldt og gyldigt\n    const isFullyFilled = grid.every(row => row.every(value => value !== 0));\n    if (isValid && isFullyFilled) {\n      alert(\"Congratulations! You've solved the Sudoku!\");\n      setIsTimerActive(false); // Stopper timeren\n      // Henter et nyt board fra serveren\n      fetchNewBoard({\n        setGrid,\n        setEditableCells,\n        setUserEdits,\n        setValidity,\n        setIsDataLoaded,\n        setTimer,\n        setIsTimerActive\n      });\n    }\n  }, [grid, isDataLoaded]);\n  useEffect(() => {\n    if (isDataLoaded) {\n      checkSudoku();\n    }\n  }, [grid, isDataLoaded, checkSudoku]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"SudokuView\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Timer: \", timer, \" sekunder\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: grid.map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((value, j) => /*#__PURE__*/_jsxDEV(\"td\", {\n            className: !validity[i][j] ? 'invalid' : '',\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: `${!validity[i][j] ? 'invalid-input' : ''} ${userEdits[i][j] ? 'user-input' : ''}`,\n              value: value === 0 ? '' : value,\n              onChange: event => handleInputChange(event, i, j),\n              readOnly: !editableCells[i][j]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 19\n            }, this)\n          }, j, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 17\n          }, this))\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(SudokuView, \"xmaeSrpZ5q29FTx2p7eoenkT8G8=\");\n_c = SudokuView;\nexport default SudokuView;\nvar _c;\n$RefreshReg$(_c, \"SudokuView\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","isValidSudoku","fetchNewBoard","jsxDEV","_jsxDEV","SudokuView","_s","grid","setGrid","validity","setValidity","Array","fill","map","isDataLoaded","setIsDataLoaded","editableCells","setEditableCells","userEdits","setUserEdits","timer","setTimer","isTimerActive","setIsTimerActive","interval","setInterval","prevTimer","clearInterval","handleInputChange","event","i","j","value","target","test","numValue","parseInt","newGrid","row","rowIndex","cell","cellIndex","newUserEdits","checkSudoku","isValid","newValidity","isFullyFilled","every","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","readOnly","_c","$RefreshReg$"],"sources":["C:/Users/marti/OneDrive/Skrivebord/Fagprojekt/Fagprojekt-/my-app/frontEnd/src/SudokuView.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport './SudokuView.css';\r\nimport { isValidSudoku } from './sudokuUtils';\r\nimport { fetchNewBoard } from './fetchNewBoard';\r\n\r\nfunction SudokuView() {\r\n  const [grid, setGrid] = useState([]);\r\n  const [validity, setValidity] = useState(Array(9).fill().map(() => Array(9).fill(true)));\r\n  const [isDataLoaded, setIsDataLoaded] = useState(false);\r\n  const [editableCells, setEditableCells] = useState([]);\r\n  const [userEdits, setUserEdits] = useState(Array(9).fill().map(() => Array(9).fill(false)));\r\n  const [timer, setTimer] = useState(0);\r\n  const [isTimerActive, setIsTimerActive] = useState(false);\r\n\r\n  // Henter et nyt board fra serveren \r\n  useEffect(() => {\r\n    fetchNewBoard({\r\n      setGrid,\r\n      setEditableCells,\r\n      setUserEdits,\r\n      setValidity,\r\n      setIsDataLoaded,\r\n      setTimer,\r\n      setIsTimerActive\r\n    });\r\n  }, []);\r\n\r\n  // Timer logik \r\n  useEffect(() => {\r\n    let interval = null;\r\n    if (isTimerActive) {\r\n      interval = setInterval(() => {\r\n        setTimer(prevTimer => prevTimer + 1);\r\n      }, 1000);\r\n    } else {\r\n      clearInterval(interval);\r\n    }\r\n    return () => clearInterval(interval);\r\n  }, [isTimerActive]);\r\n  \r\n  // Håndterer input fra brugeren\r\n  const handleInputChange = useCallback((event, i, j) => {\r\n    if (!editableCells[i][j]) {\r\n      return;\r\n    }\r\n    const value = event.target.value;\r\n    // Tjekker om input er gyldigt \r\n    if (value === '' || (/^\\d+$/.test(value) && value >= 1 && value <= 9)) {\r\n      const numValue = value === '' ? 0 : parseInt(value, 10);\r\n      const newGrid = grid.map((row, rowIndex) =>\r\n        row.map((cell, cellIndex) => rowIndex === i && cellIndex === j ? numValue : cell)\r\n      );\r\n      setGrid(newGrid);\r\n\r\n      const newUserEdits = [...userEdits];\r\n      newUserEdits[i][j] = true;\r\n      setUserEdits(newUserEdits);\r\n    }\r\n  }, [editableCells, grid, userEdits]);\r\n\r\n  // Tjekker om Sudoku er løst\r\n  const checkSudoku = useCallback(() => {\r\n    if (!isDataLoaded) return;\r\n    const { isValid, newValidity } = isValidSudoku(grid);\r\n    setValidity(newValidity);\r\n    // Tjekker om brættet er fuldt udfyldt og gyldigt\r\n    const isFullyFilled = grid.every(row => row.every(value => value !== 0));\r\n    if (isValid && isFullyFilled) {\r\n      alert(\"Congratulations! You've solved the Sudoku!\");\r\n      setIsTimerActive(false); // Stopper timeren\r\n      // Henter et nyt board fra serveren\r\n      fetchNewBoard({\r\n        setGrid,\r\n        setEditableCells,\r\n        setUserEdits,\r\n        setValidity,\r\n        setIsDataLoaded,\r\n        setTimer,\r\n        setIsTimerActive\r\n      });\r\n    }\r\n  }, [grid, isDataLoaded]);\r\n\r\n  useEffect(() => {\r\n    if (isDataLoaded) {\r\n      checkSudoku();\r\n    }\r\n  }, [grid, isDataLoaded, checkSudoku]);\r\n\r\n  return (\r\n    <div className=\"SudokuView\">\r\n      <div>Timer: {timer} sekunder</div>\r\n      <table className=\"center\">\r\n        <tbody>\r\n          {grid.map((row, i) => (\r\n            <tr key={i}>\r\n              {row.map((value, j) => (\r\n                <td key={j} className={!validity[i][j] ? 'invalid' : ''}>\r\n                  <input\r\n                    type=\"text\"\r\n                    className={`${!validity[i][j] ? 'invalid-input' : ''} ${userEdits[i][j] ? 'user-input' : ''}`}\r\n                    value={value === 0 ? '' : value}\r\n                    onChange={(event) => handleInputChange(event, i, j)}\r\n                    readOnly={!editableCells[i][j]}\r\n                  />\r\n                </td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SudokuView;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,OAAO,kBAAkB;AACzB,SAASC,aAAa,QAAQ,eAAe;AAC7C,SAASC,aAAa,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAACa,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAACC,GAAG,CAAC,MAAMF,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;EACxF,MAAM,CAACE,YAAY,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACkB,aAAa,EAAEC,gBAAgB,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACoB,SAAS,EAAEC,YAAY,CAAC,GAAGrB,QAAQ,CAACa,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAACC,GAAG,CAAC,MAAMF,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;EAC3F,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGvB,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACwB,aAAa,EAAEC,gBAAgB,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC;;EAEzD;EACAC,SAAS,CAAC,MAAM;IACdG,aAAa,CAAC;MACZM,OAAO;MACPS,gBAAgB;MAChBE,YAAY;MACZT,WAAW;MACXK,eAAe;MACfM,QAAQ;MACRE;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAxB,SAAS,CAAC,MAAM;IACd,IAAIyB,QAAQ,GAAG,IAAI;IACnB,IAAIF,aAAa,EAAE;MACjBE,QAAQ,GAAGC,WAAW,CAAC,MAAM;QAC3BJ,QAAQ,CAACK,SAAS,IAAIA,SAAS,GAAG,CAAC,CAAC;MACtC,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,MAAM;MACLC,aAAa,CAACH,QAAQ,CAAC;IACzB;IACA,OAAO,MAAMG,aAAa,CAACH,QAAQ,CAAC;EACtC,CAAC,EAAE,CAACF,aAAa,CAAC,CAAC;;EAEnB;EACA,MAAMM,iBAAiB,GAAG5B,WAAW,CAAC,CAAC6B,KAAK,EAAEC,CAAC,EAAEC,CAAC,KAAK;IACrD,IAAI,CAACf,aAAa,CAACc,CAAC,CAAC,CAACC,CAAC,CAAC,EAAE;MACxB;IACF;IACA,MAAMC,KAAK,GAAGH,KAAK,CAACI,MAAM,CAACD,KAAK;IAChC;IACA,IAAIA,KAAK,KAAK,EAAE,IAAK,OAAO,CAACE,IAAI,CAACF,KAAK,CAAC,IAAIA,KAAK,IAAI,CAAC,IAAIA,KAAK,IAAI,CAAE,EAAE;MACrE,MAAMG,QAAQ,GAAGH,KAAK,KAAK,EAAE,GAAG,CAAC,GAAGI,QAAQ,CAACJ,KAAK,EAAE,EAAE,CAAC;MACvD,MAAMK,OAAO,GAAG9B,IAAI,CAACM,GAAG,CAAC,CAACyB,GAAG,EAAEC,QAAQ,KACrCD,GAAG,CAACzB,GAAG,CAAC,CAAC2B,IAAI,EAAEC,SAAS,KAAKF,QAAQ,KAAKT,CAAC,IAAIW,SAAS,KAAKV,CAAC,GAAGI,QAAQ,GAAGK,IAAI,CAClF,CAAC;MACDhC,OAAO,CAAC6B,OAAO,CAAC;MAEhB,MAAMK,YAAY,GAAG,CAAC,GAAGxB,SAAS,CAAC;MACnCwB,YAAY,CAACZ,CAAC,CAAC,CAACC,CAAC,CAAC,GAAG,IAAI;MACzBZ,YAAY,CAACuB,YAAY,CAAC;IAC5B;EACF,CAAC,EAAE,CAAC1B,aAAa,EAAET,IAAI,EAAEW,SAAS,CAAC,CAAC;;EAEpC;EACA,MAAMyB,WAAW,GAAG3C,WAAW,CAAC,MAAM;IACpC,IAAI,CAACc,YAAY,EAAE;IACnB,MAAM;MAAE8B,OAAO;MAAEC;IAAY,CAAC,GAAG5C,aAAa,CAACM,IAAI,CAAC;IACpDG,WAAW,CAACmC,WAAW,CAAC;IACxB;IACA,MAAMC,aAAa,GAAGvC,IAAI,CAACwC,KAAK,CAACT,GAAG,IAAIA,GAAG,CAACS,KAAK,CAACf,KAAK,IAAIA,KAAK,KAAK,CAAC,CAAC,CAAC;IACxE,IAAIY,OAAO,IAAIE,aAAa,EAAE;MAC5BE,KAAK,CAAC,4CAA4C,CAAC;MACnDzB,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC;MACzB;MACArB,aAAa,CAAC;QACZM,OAAO;QACPS,gBAAgB;QAChBE,YAAY;QACZT,WAAW;QACXK,eAAe;QACfM,QAAQ;QACRE;MACF,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAAChB,IAAI,EAAEO,YAAY,CAAC,CAAC;EAExBf,SAAS,CAAC,MAAM;IACd,IAAIe,YAAY,EAAE;MAChB6B,WAAW,CAAC,CAAC;IACf;EACF,CAAC,EAAE,CAACpC,IAAI,EAAEO,YAAY,EAAE6B,WAAW,CAAC,CAAC;EAErC,oBACEvC,OAAA;IAAK6C,SAAS,EAAC,YAAY;IAAAC,QAAA,gBACzB9C,OAAA;MAAA8C,QAAA,GAAK,SAAO,EAAC9B,KAAK,EAAC,WAAS;IAAA;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAClClD,OAAA;MAAO6C,SAAS,EAAC,QAAQ;MAAAC,QAAA,eACvB9C,OAAA;QAAA8C,QAAA,EACG3C,IAAI,CAACM,GAAG,CAAC,CAACyB,GAAG,EAAER,CAAC,kBACf1B,OAAA;UAAA8C,QAAA,EACGZ,GAAG,CAACzB,GAAG,CAAC,CAACmB,KAAK,EAAED,CAAC,kBAChB3B,OAAA;YAAY6C,SAAS,EAAE,CAACxC,QAAQ,CAACqB,CAAC,CAAC,CAACC,CAAC,CAAC,GAAG,SAAS,GAAG,EAAG;YAAAmB,QAAA,eACtD9C,OAAA;cACEmD,IAAI,EAAC,MAAM;cACXN,SAAS,EAAG,GAAE,CAACxC,QAAQ,CAACqB,CAAC,CAAC,CAACC,CAAC,CAAC,GAAG,eAAe,GAAG,EAAG,IAAGb,SAAS,CAACY,CAAC,CAAC,CAACC,CAAC,CAAC,GAAG,YAAY,GAAG,EAAG,EAAE;cAC9FC,KAAK,EAAEA,KAAK,KAAK,CAAC,GAAG,EAAE,GAAGA,KAAM;cAChCwB,QAAQ,EAAG3B,KAAK,IAAKD,iBAAiB,CAACC,KAAK,EAAEC,CAAC,EAAEC,CAAC,CAAE;cACpD0B,QAAQ,EAAE,CAACzC,aAAa,CAACc,CAAC,CAAC,CAACC,CAAC;YAAE;cAAAoB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAChC;UAAC,GAPKvB,CAAC;YAAAoB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAQN,CACL;QAAC,GAXKxB,CAAC;UAAAqB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAYN,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV;AAAChD,EAAA,CA5GQD,UAAU;AAAAqD,EAAA,GAAVrD,UAAU;AA8GnB,eAAeA,UAAU;AAAC,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}