{"ast":null,"code":"var _jsxFileName = \"/Users/sebastianwulf-andersen/Documents/Fagprojekt-/my-app/frontEnd/src/SudokuView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './SudokuView.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SudokuView() {\n  _s();\n  const [grid, setGrid] = useState([]);\n  const [validity, setValidity] = useState(Array(9).fill().map(() => Array(9).fill(true)));\n  useEffect(() => {\n    // Hent et nyt Sudoku bræt fra backenden\n    fetch('http://localhost:3000/generate').then(response => response.json()).then(data => setGrid(data.board)).catch(error => console.error('Error fetching data: ', error));\n  }, []);\n  const handleInputChange = (event, i, j) => {\n    const value = event.target.value;\n    // check om input er et tal mellem 1 og 9\n    if (value === '' || /^\\d+$/.test(value) && value >= 1 && value <= 9) {\n      const numValue = value === '' ? 0 : parseInt(value, 10); // konverter til tal\n\n      // lav en ny kopi af grid og opdater værdien på den valgte celle\n      const newGrid = grid.map((row, rowIndex) => row.map((cell, cellIndex) => rowIndex === i && cellIndex === j ? numValue : cell));\n      setGrid(newGrid);\n    }\n    //hvis input ikke er et tal mellem 1 og 9, så gør ingenting\n  };\n  const isValidSudoku = () => {\n    let newValidity = Array(9).fill().map(() => Array(9).fill(true)); // Reset validity\n    let isValid = true;\n\n    // Check rows and columns\n    for (let i = 0; i < 9; i++) {\n      const rowSet = new Set();\n      const colSet = new Set();\n      for (let j = 0; j < 9; j++) {\n        const rowVal = grid[i][j];\n        const colVal = grid[j][i];\n        if (rowVal) {\n          if (rowSet.has(rowVal)) {\n            isValid = false;\n            newValidity[i][j] = false; // Mark row cell as invalid\n          } else {\n            rowSet.add(rowVal);\n          }\n        }\n        if (colVal) {\n          if (colSet.has(colVal)) {\n            isValid = false;\n            newValidity[j][i] = false; // Mark column cell as invalid\n          } else {\n            colSet.add(colVal);\n          }\n        }\n      }\n    }\n\n    // Check 3x3 boxes\n    for (let boxStartRow = 0; boxStartRow < 9; boxStartRow += 3) {\n      for (let boxStartCol = 0; boxStartCol < 9; boxStartCol += 3) {\n        const boxSet = new Set();\n        for (let r = 0; r < 3; r++) {\n          for (let c = 0; c < 3; c++) {\n            const val = grid[boxStartRow + r][boxStartCol + c];\n            if (val) {\n              if (boxSet.has(val)) {\n                isValid = false;\n                // Mark box cell as invalid\n                newValidity[boxStartRow + r][boxStartCol + c] = false;\n              } else {\n                boxSet.add(val);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // Update the validity state\n    setValidity(newValidity);\n    return isValid;\n  };\n  // tjek om sudoku er valid\n  const checkSudoku = () => {\n    alert(isValidSudoku()); //vis alert med resultat\n  };\n  useEffect(() => {\n    // Perform actions that depend on the updated validity state here\n    console.log('Validity state updated', validity);\n\n    // Example: Check if the entire grid is valid and do something\n    const isEntireGridValid = validity.every(row => row.every(cell => cell));\n    if (isEntireGridValid) {\n      console.log('The entire grid is valid!');\n      // Perform additional actions here\n    }\n  }, [validity]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"SudokuView\",\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: grid.map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((value, j) => /*#__PURE__*/_jsxDEV(\"td\", {\n            className: !validity[i][j] ? 'invalid' : '',\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: value === 0 ? '' : value,\n              onChange: event => handleInputChange(event, i, j)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 19\n            }, this)\n          }, j, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 17\n          }, this))\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button-blue\",\n      onClick: checkSudoku,\n      children: \"Check Sudoku\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n_s(SudokuView, \"lYR4ct0oTZrJC0BTGHbz8DSXzas=\");\n_c = SudokuView;\nexport default SudokuView;\nvar _c;\n$RefreshReg$(_c, \"SudokuView\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SudokuView","_s","grid","setGrid","validity","setValidity","Array","fill","map","fetch","then","response","json","data","board","catch","error","console","handleInputChange","event","i","j","value","target","test","numValue","parseInt","newGrid","row","rowIndex","cell","cellIndex","isValidSudoku","newValidity","isValid","rowSet","Set","colSet","rowVal","colVal","has","add","boxStartRow","boxStartCol","boxSet","r","c","val","checkSudoku","alert","log","isEntireGridValid","every","className","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/sebastianwulf-andersen/Documents/Fagprojekt-/my-app/frontEnd/src/SudokuView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './SudokuView.css';\n\nfunction SudokuView() {\n  const [grid, setGrid] = useState([]);\n  const [validity, setValidity] = useState(Array(9).fill().map(() => Array(9).fill(true)));\n\n\n  useEffect(() => {\n    // Hent et nyt Sudoku bræt fra backenden\n    fetch('http://localhost:3000/generate')\n      .then(response => response.json())\n      .then(data => setGrid(data.board))\n      .catch(error => console.error('Error fetching data: ', error));\n  }, []);\n\n  const handleInputChange = (event, i, j) => {\n    const value = event.target.value;\n    // check om input er et tal mellem 1 og 9\n    if (value === '' || (/^\\d+$/.test(value) && value >= 1 && value <= 9)) {\n      const numValue = value === '' ? 0 : parseInt(value, 10); // konverter til tal\n\n      // lav en ny kopi af grid og opdater værdien på den valgte celle\n      const newGrid = grid.map((row, rowIndex) =>\n        row.map((cell, cellIndex) =>\n          rowIndex === i && cellIndex === j ? numValue : cell\n        )\n      );\n\n      setGrid(newGrid);\n      \n    }\n    //hvis input ikke er et tal mellem 1 og 9, så gør ingenting\n  };\n\n  const isValidSudoku = () => {\n    let newValidity = Array(9).fill().map(() => Array(9).fill(true)); // Reset validity\n    let isValid = true;\n\n    // Check rows and columns\n    for (let i = 0; i < 9; i++) {\n      const rowSet = new Set();\n      const colSet = new Set();\n\n      for (let j = 0; j < 9; j++) {\n        const rowVal = grid[i][j];\n        const colVal = grid[j][i];\n\n        if (rowVal) {\n          if (rowSet.has(rowVal)) {\n            isValid = false;\n            newValidity[i][j] = false; // Mark row cell as invalid\n          } else {\n            rowSet.add(rowVal);\n          }\n        }\n\n        if (colVal) {\n          if (colSet.has(colVal)) {\n            isValid = false;\n            newValidity[j][i] = false; // Mark column cell as invalid\n          } else {\n            colSet.add(colVal);\n          }\n        }\n      }\n    }\n\n    // Check 3x3 boxes\n    for (let boxStartRow = 0; boxStartRow < 9; boxStartRow += 3) {\n      for (let boxStartCol = 0; boxStartCol < 9; boxStartCol += 3) {\n        const boxSet = new Set();\n\n        for (let r = 0; r < 3; r++) {\n          for (let c = 0; c < 3; c++) {\n            const val = grid[boxStartRow + r][boxStartCol + c];\n            if (val) {\n              if (boxSet.has(val)) {\n                isValid = false;\n                // Mark box cell as invalid\n                newValidity[boxStartRow + r][boxStartCol + c] = false;\n              } else {\n                boxSet.add(val);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // Update the validity state\n    setValidity(newValidity);\n    return isValid;\n  };\n  // tjek om sudoku er valid\n  const checkSudoku = () => {\n    alert(isValidSudoku()); //vis alert med resultat\n  };\n\n  useEffect(() => {\n    // Perform actions that depend on the updated validity state here\n    console.log('Validity state updated', validity);\n  \n    // Example: Check if the entire grid is valid and do something\n    const isEntireGridValid = validity.every(row => row.every(cell => cell));\n    if (isEntireGridValid) {\n      console.log('The entire grid is valid!');\n      // Perform additional actions here\n    }\n  }, [validity]); \n\n  \n\n  return (\n    <div className=\"SudokuView\">\n      <table className=\"center\">\n        <tbody>\n          {grid.map((row, i) => (\n            <tr key={i}>\n              {row.map((value, j) => (\n                <td key={j} className={!validity[i][j] ? 'invalid' : ''}>\n                  <input\n                    type=\"text\"\n                    value={value === 0 ? '' : value}\n                    onChange={(event) => handleInputChange(event, i, j)}\n                  />\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n  \n      <button\n        className=\"button-blue\"\n        onClick={checkSudoku}>\n  \n          Check Sudoku\n        \n        </button>\n  \n    </div>\n  );\n}\n\nexport default SudokuView;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}