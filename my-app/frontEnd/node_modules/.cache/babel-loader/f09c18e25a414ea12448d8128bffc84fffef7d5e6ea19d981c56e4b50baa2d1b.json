{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marti\\\\OneDrive\\\\Skrivebord\\\\Fagprojekt\\\\Fagprojekt-\\\\my-app\\\\frontEnd\\\\src\\\\SudokuView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './SudokuView.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SudokuView() {\n  _s();\n  const [grid, setGrid] = useState([]);\n  const [validity, setValidity] = useState(Array(9).fill().map(() => Array(9).fill(true)));\n\n  //sætter editableCells til at være et tomt array\n  const [editableCells, setEditableCells] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:3000/generate').then(response => response.json()).then(data => {\n      setGrid(data.board);\n      // Initialize editableCells based on whether the cell value is 0\n      const editable = data.board.map(row => row.map(value => value === 0));\n      setEditableCells(editable);\n    }).catch(error => console.error('Error fetching data: ', error));\n  }, []);\n  const handleInputChange = (event, i, j) => {\n    if (!editableCells[i][j]) {\n      // hvis cellen ikke er redigerbar, gør intet\n      return;\n    }\n    const value = event.target.value;\n    if (value === '' || /^\\d+$/.test(value) && value >= 1 && value <= 9) {\n      const numValue = value === '' ? 0 : parseInt(value, 10); // convert to number\n\n      const newGrid = grid.map((row, rowIndex) => row.map((cell, cellIndex) => rowIndex === i && cellIndex === j ? numValue : cell));\n      setGrid(newGrid);\n    }\n    //hvis input ikke er gyldigt, gør intet og returner\n\n    const isValidSudoku = () => {\n      let newValidity = Array(9).fill().map(() => Array(9).fill(true));\n      let isValid = true;\n\n      // Track first occurrences of values in rows, columns, and boxes\n      let firstOccurrencesRows = Array(9).fill().map(() => ({}));\n      let firstOccurrencesCols = Array(9).fill().map(() => ({}));\n      let firstOccurrencesBoxes = Array(9).fill().map(() => ({}));\n      for (let i = 0; i < 9; i++) {\n        for (let j = 0; j < 9; j++) {\n          const val = grid[i][j];\n          if (val) {\n            // Check rows\n            if (val in firstOccurrencesRows[i]) {\n              // Mark both the original and the duplicate as invalid\n              newValidity[i][j] = false;\n              const originalPos = firstOccurrencesRows[i][val];\n              newValidity[originalPos[0]][originalPos[1]] = false;\n            } else {\n              firstOccurrencesRows[i][val] = [i, j];\n            }\n\n            // Check columns\n            if (val in firstOccurrencesCols[j]) {\n              // Mark both the original and the duplicate as invalid\n              newValidity[i][j] = false;\n              const originalPos = firstOccurrencesCols[j][val];\n              newValidity[originalPos[0]][originalPos[1]] = false;\n            } else {\n              firstOccurrencesCols[j][val] = [i, j];\n            }\n\n            // Calculate box index\n            const boxIndex = 3 * Math.floor(i / 3) + Math.floor(j / 3);\n            // Check boxes\n            if (val in firstOccurrencesBoxes[boxIndex]) {\n              // Mark both the original and the duplicate as invalid\n              newValidity[i][j] = false;\n              const originalPos = firstOccurrencesBoxes[boxIndex][val];\n              newValidity[originalPos[0]][originalPos[1]] = false;\n            } else {\n              firstOccurrencesBoxes[boxIndex][val] = [i, j];\n            }\n          }\n        }\n      }\n      setValidity(newValidity);\n\n      // Check if any cell is marked as invalid\n      for (let i = 0; i < 9; i++) {\n        for (let j = 0; j < 9; j++) {\n          if (!newValidity[i][j]) {\n            isValid = false;\n            break;\n          }\n        }\n        if (!isValid) break;\n      }\n      return isValid;\n    };\n    // tjek om sudoku er valid\n    const checkSudoku = () => {\n      alert(isValidSudoku()); //vis alert med resultat\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"SudokuView\",\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"center\",\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: grid.map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: row.map((value, j) => /*#__PURE__*/_jsxDEV(\"td\", {\n              className: !validity[i][j] ? 'invalid' : '',\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                className: !validity[i][j] ? 'invalid-input' : '',\n                value: value === 0 ? '' : value,\n                onChange: event => handleInputChange(event, i, j),\n                readOnly: !editableCells[i][j] // Gør inputfeltet ikke-redigerbart, hvis cellen ikke er redigerbar\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 19\n              }, this)\n            }, j, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 17\n            }, this))\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button-blue\",\n        onClick: checkSudoku,\n        children: \"Check Sudoku\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }, this);\n  };\n}\n_s(SudokuView, \"Q8UE+cz+R8veXBblq0TUPhnQRE4=\");\n_c = SudokuView;\nexport default SudokuView;\nvar _c;\n$RefreshReg$(_c, \"SudokuView\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SudokuView","_s","grid","setGrid","validity","setValidity","Array","fill","map","editableCells","setEditableCells","fetch","then","response","json","data","board","editable","row","value","catch","error","console","handleInputChange","event","i","j","target","test","numValue","parseInt","newGrid","rowIndex","cell","cellIndex","isValidSudoku","newValidity","isValid","firstOccurrencesRows","firstOccurrencesCols","firstOccurrencesBoxes","val","originalPos","boxIndex","Math","floor","checkSudoku","alert","className","children","type","onChange","readOnly","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/marti/OneDrive/Skrivebord/Fagprojekt/Fagprojekt-/my-app/frontEnd/src/SudokuView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './SudokuView.css';\r\n\r\nfunction SudokuView() {\r\n  const [grid, setGrid] = useState([]);\r\n  const [validity, setValidity] = useState(Array(9).fill().map(() => Array(9).fill(true)));\r\n\r\n  //sætter editableCells til at være et tomt array\r\n  const [editableCells, setEditableCells] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch('http://localhost:3000/generate')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setGrid(data.board);\r\n        // Initialize editableCells based on whether the cell value is 0\r\n        const editable = data.board.map(row => row.map(value => value === 0));\r\n        setEditableCells(editable);\r\n      })\r\n      .catch(error => console.error('Error fetching data: ', error));\r\n  }, []);\r\n\r\n  const handleInputChange = (event, i, j) => {\r\n    if (!editableCells[i][j]) {\r\n      // hvis cellen ikke er redigerbar, gør intet\r\n      return;\r\n    }\r\n    const value = event.target.value;\r\n    if (value === '' || (/^\\d+$/.test(value) && value >= 1 && value <= 9)) {\r\n      const numValue = value === '' ? 0 : parseInt(value, 10); // convert to number\r\n  \r\n      const newGrid = grid.map((row, rowIndex) =>\r\n        row.map((cell, cellIndex) =>\r\n          rowIndex === i && cellIndex === j ? numValue : cell\r\n        )\r\n      );\r\n  \r\n      setGrid(newGrid);\r\n    }\r\n    //hvis input ikke er gyldigt, gør intet og returner\r\n  \r\n\r\n  const isValidSudoku = () => {\r\n    let newValidity = Array(9).fill().map(() => Array(9).fill(true)); \r\n    let isValid = true;\r\n  \r\n    // Track first occurrences of values in rows, columns, and boxes\r\n    let firstOccurrencesRows = Array(9).fill().map(() => ({}));\r\n    let firstOccurrencesCols = Array(9).fill().map(() => ({}));\r\n    let firstOccurrencesBoxes = Array(9).fill().map(() => ({}));\r\n  \r\n    for (let i = 0; i < 9; i++) {\r\n      for (let j = 0; j < 9; j++) {\r\n        const val = grid[i][j];\r\n        if (val) {\r\n          // Check rows\r\n          if (val in firstOccurrencesRows[i]) {\r\n            // Mark both the original and the duplicate as invalid\r\n            newValidity[i][j] = false; \r\n            const originalPos = firstOccurrencesRows[i][val];\r\n            newValidity[originalPos[0]][originalPos[1]] = false; \r\n          } else {\r\n            firstOccurrencesRows[i][val] = [i, j]; \r\n          }\r\n  \r\n          // Check columns\r\n          if (val in firstOccurrencesCols[j]) {\r\n            // Mark both the original and the duplicate as invalid\r\n            newValidity[i][j] = false; \r\n            const originalPos = firstOccurrencesCols[j][val];\r\n            newValidity[originalPos[0]][originalPos[1]] = false; \r\n          } else {\r\n            firstOccurrencesCols[j][val] = [i, j]; \r\n          }\r\n  \r\n          // Calculate box index\r\n          const boxIndex = 3 * Math.floor(i / 3) + Math.floor(j / 3);\r\n          // Check boxes\r\n          if (val in firstOccurrencesBoxes[boxIndex]) {\r\n            // Mark both the original and the duplicate as invalid\r\n            newValidity[i][j] = false; \r\n            const originalPos = firstOccurrencesBoxes[boxIndex][val];\r\n            newValidity[originalPos[0]][originalPos[1]] = false; \r\n          } else {\r\n            firstOccurrencesBoxes[boxIndex][val] = [i, j]; \r\n          }\r\n        }\r\n      }\r\n    }\r\n  \r\n   \r\n    setValidity(newValidity);\r\n    \r\n    // Check if any cell is marked as invalid\r\n    for (let i = 0; i < 9; i++) {\r\n      for (let j = 0; j < 9; j++) {\r\n        if (!newValidity[i][j]) {\r\n          isValid = false;\r\n          break;\r\n        }\r\n      }\r\n      if (!isValid) break;\r\n    }\r\n  \r\n    return isValid;\r\n  };\r\n  // tjek om sudoku er valid\r\n  const checkSudoku = () => {\r\n    alert(isValidSudoku()); //vis alert med resultat\r\n  };\r\n  \r\n\r\n  return (\r\n    <div className=\"SudokuView\">\r\n      <table className=\"center\">\r\n        <tbody>\r\n          {grid.map((row, i) => (\r\n            <tr key={i}>\r\n              {row.map((value, j) => (\r\n                <td key={j} className={!validity[i][j] ? 'invalid' : ''}>\r\n                  <input\r\n                    type=\"text\"\r\n                    className={!validity[i][j] ? 'invalid-input' : ''}\r\n                    value={value === 0 ? '' : value}\r\n                    onChange={(event) => handleInputChange(event, i, j)}\r\n                    readOnly={!editableCells[i][j]} // Gør inputfeltet ikke-redigerbart, hvis cellen ikke er redigerbar\r\n                  />\r\n                </td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n  \r\n      <button\r\n        className=\"button-blue\"\r\n        onClick={checkSudoku}>\r\n  \r\n          Check Sudoku\r\n        \r\n        </button>\r\n  \r\n    </div>\r\n  );\r\n}\r\n}\r\nexport default SudokuView;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}