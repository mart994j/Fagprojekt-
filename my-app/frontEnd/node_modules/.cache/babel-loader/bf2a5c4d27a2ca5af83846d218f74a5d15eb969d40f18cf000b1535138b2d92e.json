{"ast":null,"code":"var _jsxFileName = \"/Users/sebastianwulf-andersen/Documents/Fagprojekt-/my-app/frontEnd/src/Views/SudokuView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useContext, useRef } from 'react';\nimport './CSS/SudokuView.css';\nimport { isValidSudoku } from '../sudokuUtils';\nimport { fetchNewBoard } from '../fetchNewBoard';\nimport UserContext from '../UserContext';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SudokuView() {\n  _s();\n  var _location$state2;\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [n, setN] = useState(9); // Initialiserer n med en standardværdi eller fallback værdi\n  const [grid, setGrid] = useState([]);\n  const [validity, setValidity] = useState(Array(n).fill().map(() => Array(n).fill(true)));\n  const [userEdits, setUserEdits] = useState(Array(n).fill().map(() => Array(n).fill(false)));\n  const [isDataLoaded, setIsDataLoaded] = useState(false);\n  const [editableCells, setEditableCells] = useState([]);\n  const [timer, setTimer] = useState(0);\n  const isTimerActiveRef = useRef(false);\n  const {\n    username\n  } = useContext(UserContext);\n  const [isNotesMode, setIsNotesMode] = useState(false);\n  const [notes, setNotes] = useState(Array(n).fill().map(() => Array(n).fill([]))); // Initialize with empty arrays for notes\n\n  // Henter et nyt board fra serveren \n  useEffect(() => {\n    var _location$state;\n    const n = (_location$state = location.state) !== null && _location$state !== void 0 && _location$state.n ? location.state.n : 9; // Fallback til 9 som standard størrelse\n    setN(n);\n    fetchNewBoard({\n      n,\n      setGrid,\n      setEditableCells,\n      setUserEdits,\n      setValidity,\n      setIsDataLoaded,\n      setTimer,\n      setIsTimerActive: isTimerActiveRef.current ? () => {} : startTimer\n    });\n  }, [(_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.n]);\n\n  // Timer logik \n  const startTimer = () => {\n    if (!isTimerActiveRef.current) {\n      isTimerActiveRef.current = true;\n      const interval = setInterval(() => {\n        if (isTimerActiveRef.current) {\n          setTimer(prevTimer => prevTimer + 1);\n        } else {\n          clearInterval(interval);\n        }\n      }, 1000);\n    }\n  };\n\n  // Stop timer-funktion\n  const stopTimer = () => {\n    isTimerActiveRef.current = false;\n  };\n\n  // Håndterer input fra brugeren\n  const handleInputChange = useCallback((event, i, j) => {\n    if (!editableCells[i][j] || !noteMode) {\n      return;\n    }\n    const value = event.target.value;\n    if (isNotesMode) {\n      // Handle note input\n      const noteValue = parseInt(value, 10);\n      const updatedNotes = [...notes];\n      if (value === '') {\n        updatedNotes[i][j] = []; // Clear notes if input is empty\n      } else if (/^\\d+$/.test(value) && value >= 1 && value <= n) {\n        if (updatedNotes[i][j].includes(noteValue)) {\n          // If the note is already present, remove it\n          updatedNotes[i][j] = updatedNotes[i][j].filter(note => note !== noteValue);\n        } else {\n          // Add note if it's a valid number and not already present\n          updatedNotes[i][j] = [...new Set([...updatedNotes[i][j], noteValue])]; // This also prevents duplicate notes\n        }\n      }\n      setNotes(updatedNotes);\n    } else {\n      // Existing logic for handling value input\n      if (value === '' || /^\\d+$/.test(value) && value >= 1 && value <= n) {\n        const numValue = value === '' ? 0 : parseInt(value, 10);\n        const newGrid = grid.map((row, rowIndex) => row.map((cell, cellIndex) => rowIndex === i && cellIndex === j ? numValue : cell));\n        const updatedNotes = [...notes]; // Prepare to potentially clear notes\n        if (numValue !== 0) {\n          // If a valid number is placed, clear the notes for this cell\n          updatedNotes[i][j] = [];\n        }\n        setGrid(newGrid);\n        const newUserEdits = [...userEdits];\n        newUserEdits[i][j] = true;\n        setUserEdits(newUserEdits);\n      }\n    }\n    stopTimer();\n  }, [editableCells, grid, userEdits, n, isNotesMode, notes]);\n  function getUserLocation(callback) {\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        callback(latitude, longitude);\n      }, error => {\n        console.error(\"Geolocation error:\", error);\n        callback(null, null); // Håndter fejl eller ingen tilladelse\n      });\n    } else {\n      console.log(\"Geolocation is not supported by this browser.\");\n      callback(null, null); // Håndter unsupported browser\n    }\n  }\n  const submitScore = useCallback((username, time) => {\n    getUserLocation((latitude, longitude) => {\n      const location = {\n        lat: latitude,\n        lng: longitude\n      };\n      console.log({\n        username,\n        time,\n        location\n      }); // Debugging\n      fetch('http://localhost:3000/submit', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          time,\n          location\n        })\n      }).then(response => response.json()).then(data => {\n        console.log('Score submitted:', data);\n        // Opdater UI eller state her baseret på svaret, hvis nødvendigt\n      }).catch(error => console.error('Error submitting score:', error));\n    });\n  }, []);\n\n  // Tjekker om Sudoku er løst\n  const checkSudoku = useCallback(() => {\n    if (!isDataLoaded) return;\n    const {\n      isValid,\n      newValidity\n    } = isValidSudoku(grid);\n    setValidity(newValidity);\n    // Tjekker om brættet er fuldt udfyldt og gyldigt\n    const isFullyFilled = grid.every(row => row.every(value => value !== 0));\n    if (isValid && isFullyFilled) {\n      alert(`Congratulations! You've solved the Sudoku in ${timer} seconds!`);\n      stopTimer();\n      submitScore(username, timer);\n      navigate('/');\n    }\n  }, [grid, isDataLoaded, timer, username, navigate, submitScore]);\n  useEffect(() => {\n    if (isDataLoaded) {\n      checkSudoku();\n    }\n  }, [grid, isDataLoaded, checkSudoku]);\n  useEffect(() => {\n    return () => {\n      isTimerActiveRef.current = false; // Sørg for at timeren stopper, når komponenten unmounts\n    };\n  }, []);\n\n  // Calculate the square root of n to determine subgrid size\n  const subGridSize = Math.sqrt(n);\n  const baseSize = 500; // Base size for the Sudoku board\n  const cellSize = baseSize / n;\n  const fontSize = Math.max(12, cellSize / 3); // Adjust this formula as needed\n\n  // Modify the return statement in your SudokuView component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"SudokuView\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sudoku\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: [\"Timer: \", timer, \" sekunder\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setIsNotesMode(!isNotesMode),\n      children: isNotesMode ? 'Disable Notes Mode' : 'Enable Notes Mode'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"center\",\n      style: {\n        width: baseSize + 'px',\n        height: baseSize + 'px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: grid.map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((value, j) => /*#__PURE__*/_jsxDEV(\"td\", {\n            className: `${!validity[i][j] ? 'invalid' : ''} ` + `${(j + 1) % subGridSize === 0 && j + 1 !== n ? 'right-border' : ''} ` + `${(i + 1) % subGridSize === 0 && i + 1 !== n ? 'bottom-border' : ''}`,\n            style: {\n              width: cellSize + 'px',\n              height: cellSize + 'px'\n            },\n            children: [notes[i][j].length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"notes\",\n              style: {\n                fontSize: '10px',\n                width: cellSize + 'px',\n                height: cellSize + 'px'\n              },\n              children: notes[i][j].join(', ')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 21\n            }, this) : null, /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: `${!validity[i][j] ? 'invalid-input' : ''} ${userEdits[i][j] ? 'user-input' : ''}`,\n              value: value === 0 ? '' : value,\n              onChange: event => handleInputChange(event, i, j),\n              readOnly: !editableCells[i][j],\n              style: {\n                fontSize: `${fontSize}px`,\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                width: '100%',\n                height: '100%',\n                zIndex: 1\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 19\n            }, this)]\n          }, j, true, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 17\n          }, this))\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this);\n}\n_s(SudokuView, \"DFrTCH9aVNzflXru0UOPh3nIWC4=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = SudokuView;\nexport default SudokuView;\nvar _c;\n$RefreshReg$(_c, \"SudokuView\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useContext","useRef","isValidSudoku","fetchNewBoard","UserContext","useLocation","useNavigate","jsxDEV","_jsxDEV","SudokuView","_s","_location$state2","location","navigate","n","setN","grid","setGrid","validity","setValidity","Array","fill","map","userEdits","setUserEdits","isDataLoaded","setIsDataLoaded","editableCells","setEditableCells","timer","setTimer","isTimerActiveRef","username","isNotesMode","setIsNotesMode","notes","setNotes","_location$state","state","setIsTimerActive","current","startTimer","interval","setInterval","prevTimer","clearInterval","stopTimer","handleInputChange","event","i","j","noteMode","value","target","noteValue","parseInt","updatedNotes","test","includes","filter","note","Set","numValue","newGrid","row","rowIndex","cell","cellIndex","newUserEdits","getUserLocation","callback","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","error","console","log","submitScore","time","lat","lng","fetch","method","headers","body","JSON","stringify","then","response","json","data","catch","checkSudoku","isValid","newValidity","isFullyFilled","every","alert","subGridSize","Math","sqrt","baseSize","cellSize","fontSize","max","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","width","height","length","join","type","onChange","readOnly","top","left","zIndex","_c","$RefreshReg$"],"sources":["/Users/sebastianwulf-andersen/Documents/Fagprojekt-/my-app/frontEnd/src/Views/SudokuView.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useContext, useRef } from 'react';\nimport './CSS/SudokuView.css';\nimport { isValidSudoku } from '../sudokuUtils';\nimport { fetchNewBoard } from '../fetchNewBoard';\nimport UserContext from '../UserContext';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\n\nfunction SudokuView() {\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  const [n, setN] = useState(9); // Initialiserer n med en standardværdi eller fallback værdi\n  const [grid, setGrid] = useState([]);\n\n  const [validity, setValidity] = useState(Array(n).fill().map(() => Array(n).fill(true)));\n  const [userEdits, setUserEdits] = useState(Array(n).fill().map(() => Array(n).fill(false)));\n\n  const [isDataLoaded, setIsDataLoaded] = useState(false);\n  const [editableCells, setEditableCells] = useState([]);\n  const [timer, setTimer] = useState(0);\n  const isTimerActiveRef = useRef(false);\n  const { username } = useContext(UserContext);\n  const [isNotesMode, setIsNotesMode] = useState(false);\n  const [notes, setNotes] = useState(Array(n).fill().map(() => Array(n).fill([]))); // Initialize with empty arrays for notes\n\n\n  // Henter et nyt board fra serveren \n  useEffect(() => {\n    const n = location.state?.n ? location.state.n : 9; // Fallback til 9 som standard størrelse\n    setN(n);\n    fetchNewBoard({\n      n,\n      setGrid,\n      setEditableCells,\n      setUserEdits,\n      setValidity,\n      setIsDataLoaded,\n      setTimer,\n      setIsTimerActive: isTimerActiveRef.current ? () => { } : startTimer,\n    });\n  }, [location.state?.n]);\n\n  // Timer logik \n  const startTimer = () => {\n    if (!isTimerActiveRef.current) {\n      isTimerActiveRef.current = true;\n      const interval = setInterval(() => {\n        if (isTimerActiveRef.current) {\n          setTimer((prevTimer) => prevTimer + 1);\n        } else {\n          clearInterval(interval);\n        }\n      }, 1000);\n    }\n  };\n\n  // Stop timer-funktion\n  const stopTimer = () => {\n    isTimerActiveRef.current = false;\n  };\n\n  // Håndterer input fra brugeren\n  const handleInputChange = useCallback((event, i, j) => {\n    if (!editableCells[i][j] || !noteMode) {\n      return;\n    }\n    const value = event.target.value;\n\n    if (isNotesMode) {\n      // Handle note input\n      const noteValue = parseInt(value, 10);\n      const updatedNotes = [...notes];\n      if (value === '') {\n        updatedNotes[i][j] = []; // Clear notes if input is empty\n      } else if (/^\\d+$/.test(value) && value >= 1 && value <= n) {\n        if (updatedNotes[i][j].includes(noteValue)) {\n          // If the note is already present, remove it\n          updatedNotes[i][j] = updatedNotes[i][j].filter(note => note !== noteValue);\n        } else {\n          // Add note if it's a valid number and not already present\n          updatedNotes[i][j] = [...new Set([...updatedNotes[i][j], noteValue])]; // This also prevents duplicate notes\n        }\n      }\n      setNotes(updatedNotes);\n    } else {\n      // Existing logic for handling value input\n      if (value === '' || (/^\\d+$/.test(value) && value >= 1 && value <= n)) {\n        const numValue = value === '' ? 0 : parseInt(value, 10);\n        const newGrid = grid.map((row, rowIndex) =>\n          row.map((cell, cellIndex) => rowIndex === i && cellIndex === j ? numValue : cell)\n        );\n\n        const updatedNotes = [...notes]; // Prepare to potentially clear notes\n        if (numValue !== 0) {\n          // If a valid number is placed, clear the notes for this cell\n          updatedNotes[i][j] = [];\n        }\n\n        setGrid(newGrid);\n\n        const newUserEdits = [...userEdits];\n        newUserEdits[i][j] = true;\n        setUserEdits(newUserEdits);\n      }\n    }\n    stopTimer();\n  }, [editableCells, grid, userEdits, n, isNotesMode, notes]);\n\n\n  function getUserLocation(callback) {\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          callback(latitude, longitude);\n        },\n        (error) => {\n          console.error(\"Geolocation error:\", error);\n          callback(null, null); // Håndter fejl eller ingen tilladelse\n        }\n      );\n    } else {\n      console.log(\"Geolocation is not supported by this browser.\");\n      callback(null, null); // Håndter unsupported browser\n    }\n  }\n  const submitScore = useCallback((username, time) => {\n    getUserLocation((latitude, longitude) => {\n      const location = { lat: latitude, lng: longitude };\n      console.log({ username, time, location }); // Debugging\n      fetch('http://localhost:3000/submit', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          username,\n          time,\n          location,\n        }),\n      })\n        .then(response => response.json())\n        .then(data => {\n          console.log('Score submitted:', data);\n          // Opdater UI eller state her baseret på svaret, hvis nødvendigt\n        })\n        .catch(error => console.error('Error submitting score:', error));\n    });\n  }, []);\n\n\n\n\n  // Tjekker om Sudoku er løst\n  const checkSudoku = useCallback(() => {\n    if (!isDataLoaded) return;\n    const { isValid, newValidity } = isValidSudoku(grid);\n    setValidity(newValidity);\n    // Tjekker om brættet er fuldt udfyldt og gyldigt\n    const isFullyFilled = grid.every(row => row.every(value => value !== 0));\n    if (isValid && isFullyFilled) {\n      alert(`Congratulations! You've solved the Sudoku in ${timer} seconds!`);\n      stopTimer();\n      submitScore(username, timer);\n      navigate('/');\n\n    }\n  }, [grid, isDataLoaded, timer, username, navigate, submitScore]);\n\n  useEffect(() => {\n    if (isDataLoaded) {\n      checkSudoku();\n    }\n  }, [grid, isDataLoaded, checkSudoku]);\n\n\n\n\n  useEffect(() => {\n    return () => {\n      isTimerActiveRef.current = false; // Sørg for at timeren stopper, når komponenten unmounts\n    };\n  }, []);\n\n  // Calculate the square root of n to determine subgrid size\n  const subGridSize = Math.sqrt(n);\n  const baseSize = 500; // Base size for the Sudoku board\n  const cellSize = baseSize / n;\n  const fontSize = Math.max(12, cellSize / 3); // Adjust this formula as needed\n\n  // Modify the return statement in your SudokuView component\n  return (\n    <div className=\"SudokuView\">\n      <h1>Sudoku</h1>\n      <div className=\"timer\">Timer: {timer} sekunder</div>\n      <button onClick={() => setIsNotesMode(!isNotesMode)}>\n        {isNotesMode ? 'Disable Notes Mode' : 'Enable Notes Mode'}\n      </button>\n      <table className=\"center\" style={{ width: baseSize + 'px', height: baseSize + 'px' }}>\n        <tbody>\n          {grid.map((row, i) => (\n            <tr key={i}>\n              {row.map((value, j) => (\n                <td\n                  key={j}\n                  className={\n                    `${!validity[i][j] ? 'invalid' : ''} ` +\n                    `${(j + 1) % subGridSize === 0 && j + 1 !== n ? 'right-border' : ''} ` +\n                    `${(i + 1) % subGridSize === 0 && i + 1 !== n ? 'bottom-border' : ''}`\n                  }\n                  style={{ width: cellSize + 'px', height: cellSize + 'px'}}\n                >\n                  {notes[i][j].length > 0 ? (\n                    <div className=\"notes\" style={{ fontSize: '10px', width: cellSize + 'px', height: cellSize + 'px' }}>{notes[i][j].join(', ')}</div>\n                  ) : null}\n                  <input\n                    type=\"text\"\n                    className={`${!validity[i][j] ? 'invalid-input' : ''} ${userEdits[i][j] ? 'user-input' : ''}`}\n                    value={value === 0 ? '' : value}\n                    onChange={(event) => handleInputChange(event, i, j)}\n                    readOnly={!editableCells[i][j]}\n                    style={{ fontSize: `${fontSize}px`, position: 'absolute', top: 0, left: 0, width: '100%', height: '100%', zIndex: 1 }}\n                  />\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n\n}\n\nexport default SudokuView;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}