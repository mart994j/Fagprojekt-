{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marti\\\\OneDrive\\\\Skrivebord\\\\Fagprojekt\\\\Fagprojekt-\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Initialize a 9x9 grid with some predefined numbers\n  const [grid, setGrid] = useState([[5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9]]);\n  const handleInputChange = (event, i, j) => {\n    const value = event.target.value;\n    // Check if the input is a valid number or an empty string\n    if (value === '' || /^\\d+$/.test(value) && value >= 0 && value <= 9) {\n      const numValue = value === '' ? 0 : parseInt(value, 10); // Convert input to number or reset to 0 if empty\n\n      // Create a new grid with the updated value\n      const newGrid = grid.map((row, rowIndex) => row.map((cell, cellIndex) => rowIndex === i && cellIndex === j ? numValue : cell));\n      setGrid(newGrid);\n    }\n    // If the input is not valid (letters or invalid characters), do nothing\n  };\n  const isValidSudoku = () => {\n    for (let i = 0; i < 9; i++) {\n      const row = new Set();\n      const col = new Set();\n      const box = new Set();\n      for (let j = 0; j < 9; j++) {\n        const valueRow = grid[i][j];\n        const valueCol = grid[j][i];\n        const valueBox = grid[3 * Math.floor(i / 3) + Math.floor(j / 3)][3 * (i % 3) + j % 3];\n        if (valueRow > 0 && row.has(valueRow) || valueCol > 0 && col.has(valueCol) || valueBox > 0 && box.has(valueBox)) {\n          return 'Invalid Sudoku'; // Set the validation message to 'Invalid Sudoku'\n        }\n        row.add(valueRow);\n        col.add(valueCol);\n        box.add(valueBox);\n      }\n    }\n    return 'Valid Sudoku'; // Set the validation message to 'Valid Sudoku'\n  };\n  const checkSudoku = () => {\n    alert(isValidSudoku()); // Display the validation message in an alert\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: grid.map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((value, j) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: value === 0 ? '' : value,\n              onChange: event => handleInputChange(event, i, j)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 19\n            }, this)\n          }, j, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 17\n          }, this))\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: checkSudoku,\n      children: \"Check Sudoku\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ICFAokJhwyOpTIHACQ3QkNIIZPs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","grid","setGrid","handleInputChange","event","i","j","value","target","test","numValue","parseInt","newGrid","map","row","rowIndex","cell","cellIndex","isValidSudoku","Set","col","box","valueRow","valueCol","valueBox","Math","floor","has","add","checkSudoku","alert","className","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/marti/OneDrive/Skrivebord/Fagprojekt/Fagprojekt-/my-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  // Initialize a 9x9 grid with some predefined numbers\n  const [grid, setGrid] = useState([\n    [5, 3, 0, 0, 7, 0, 0, 0, 0],\n    [6, 0, 0, 1, 9, 5, 0, 0, 0],\n    [0, 9, 8, 0, 0, 0, 0, 6, 0],\n    [8, 0, 0, 0, 6, 0, 0, 0, 3],\n    [4, 0, 0, 8, 0, 3, 0, 0, 1],\n    [7, 0, 0, 0, 2, 0, 0, 0, 6],\n    [0, 6, 0, 0, 0, 0, 2, 8, 0],\n    [0, 0, 0, 4, 1, 9, 0, 0, 5],\n    [0, 0, 0, 0, 8, 0, 0, 7, 9]\n  ]);\n\n  const handleInputChange = (event, i, j) => {\n    const value = event.target.value;\n    // Check if the input is a valid number or an empty string\n    if (value === '' || (/^\\d+$/.test(value) && value >= 0 && value <= 9)) {\n      const numValue = value === '' ? 0 : parseInt(value, 10); // Convert input to number or reset to 0 if empty\n  \n      // Create a new grid with the updated value\n      const newGrid = grid.map((row, rowIndex) =>\n        row.map((cell, cellIndex) =>\n          rowIndex === i && cellIndex === j ? numValue : cell\n        )\n      );\n  \n      setGrid(newGrid);\n    }\n    // If the input is not valid (letters or invalid characters), do nothing\n  };\n  const isValidSudoku = () => {\n    for (let i = 0; i < 9; i++) {\n      const row = new Set();\n      const col = new Set();\n      const box = new Set();\n\n      for (let j = 0; j < 9; j++) {\n        const valueRow = grid[i][j];\n        const valueCol = grid[j][i];\n        const valueBox = grid[3 * Math.floor(i / 3) + Math.floor(j / 3)][3 * (i % 3) + (j % 3)];\n\n        if ((valueRow > 0 && row.has(valueRow)) || (valueCol > 0 && col.has(valueCol)) || (valueBox > 0 && box.has(valueBox))) {\n          return 'Invalid Sudoku'; // Set the validation message to 'Invalid Sudoku'\n          \n        }\n\n        row.add(valueRow);\n        col.add(valueCol);\n        box.add(valueBox);\n      }\n    }\n\n    return 'Valid Sudoku'; // Set the validation message to 'Valid Sudoku'\n  };\n  \n  const checkSudoku = () => {\n    alert(isValidSudoku()); // Display the validation message in an alert\n  };\n\n  return (\n    <div className=\"App\">\n      <table className=\"center\">\n        <tbody>\n          {grid.map((row, i) => (\n            <tr key={i}>\n              {row.map((value, j) => (\n                <td key={j}>\n                  <input \n                    type=\"text\" \n                    value={value === 0 ? '' : value} \n                    onChange={event => handleInputChange(event, i, j)} \n                  />\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <button onClick={checkSudoku}>Check Sudoku</button>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}