{"ast":null,"code":"var _jsxFileName = \"/Users/sebastianwulf-andersen/Documents/Fagprojekt-/my-app/frontEnd/src/SudokuView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './SudokuView.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SudokuView() {\n  _s();\n  const [grid, setGrid] = useState([]);\n  const [validity, setValidity] = useState(Array(9).fill().map(() => Array(9).fill(true)));\n  useEffect(() => {\n    // Hent et nyt Sudoku bræt fra backenden\n    fetch('http://localhost:3000/generate').then(response => response.json()).then(data => setGrid(data.board)).catch(error => console.error('Error fetching data: ', error));\n  }, []);\n  const handleInputChange = (event, i, j) => {\n    const value = event.target.value;\n    // check om input er et tal mellem 1 og 9\n    if (value === '' || /^\\d+$/.test(value) && value >= 1 && value <= 9) {\n      const numValue = value === '' ? 0 : parseInt(value, 10); // konverter til tal\n\n      // lav en ny kopi af grid og opdater værdien på den valgte celle\n      const newGrid = grid.map((row, rowIndex) => row.map((cell, cellIndex) => rowIndex === i && cellIndex === j ? numValue : cell));\n      setGrid(newGrid);\n    }\n    //hvis input ikke er et tal mellem 1 og 9, så gør ingenting\n  };\n  const isValidSudoku = () => {\n    let newValidity = Array(9).fill().map(() => Array(9).fill(true));\n    let isValid = true;\n\n    // Track first occurrences of values in rows, columns, and boxes\n    let firstOccurrencesRows = Array(9).fill().map(() => ({}));\n    let firstOccurrencesCols = Array(9).fill().map(() => ({}));\n    let firstOccurrencesBoxes = Array(9).fill().map(() => ({}));\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        const val = grid[i][j];\n        if (val) {\n          // Check rows\n          if (val in firstOccurrencesRows[i]) {\n            // Mark both the original and the duplicate as invalid\n            newValidity[i][j] = false;\n            const originalPos = firstOccurrencesRows[i][val];\n            newValidity[originalPos[0]][originalPos[1]] = false;\n          } else {\n            firstOccurrencesRows[i][val] = [i, j];\n          }\n\n          // Check columns\n          if (val in firstOccurrencesCols[j]) {\n            // Mark both the original and the duplicate as invalid\n            newValidity[i][j] = false;\n            const originalPos = firstOccurrencesCols[j][val];\n            newValidity[originalPos[0]][originalPos[1]] = false;\n          } else {\n            firstOccurrencesCols[j][val] = [i, j];\n          }\n\n          // Calculate box index\n          const boxIndex = 3 * Math.floor(i / 3) + Math.floor(j / 3);\n          // Check boxes\n          if (val in firstOccurrencesBoxes[boxIndex]) {\n            // Mark both the original and the duplicate as invalid\n            newValidity[i][j] = false;\n            const originalPos = firstOccurrencesBoxes[boxIndex][val];\n            newValidity[originalPos[0]][originalPos[1]] = false;\n          } else {\n            firstOccurrencesBoxes[boxIndex][val] = [i, j];\n          }\n        }\n      }\n    }\n    setValidity(newValidity);\n\n    // Check if any cell is marked as invalid\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        if (!newValidity[i][j]) {\n          isValid = false;\n          break;\n        }\n      }\n      if (!isValid) break;\n    }\n    return isValid;\n  };\n  // tjek om sudoku er valid\n  const checkSudoku = () => {\n    alert(isValidSudoku()); //vis alert med resultat\n  };\n  useEffect(() => {\n    // Perform actions that depend on the updated validity state here\n    console.log('Validity state updated', validity);\n\n    // Example: Check if the entire grid is valid and do something\n    const isEntireGridValid = validity.every(row => row.every(cell => cell));\n    if (isEntireGridValid) {\n      console.log('The entire grid is valid!');\n      // Perform additional actions here\n    }\n  }, [validity]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"SudokuView\",\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: grid.map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((value, j) => /*#__PURE__*/_jsxDEV(\"td\", {\n            className: !validity[i][j] ? 'invalid' : '',\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: value === 0 ? '' : value,\n              onChange: event => handleInputChange(event, i, j)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 19\n            }, this)\n          }, j, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 17\n          }, this))\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button-blue\",\n      onClick: checkSudoku,\n      children: \"Check Sudoku\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n}\n_s(SudokuView, \"lYR4ct0oTZrJC0BTGHbz8DSXzas=\");\n_c = SudokuView;\nexport default SudokuView;\nvar _c;\n$RefreshReg$(_c, \"SudokuView\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SudokuView","_s","grid","setGrid","validity","setValidity","Array","fill","map","fetch","then","response","json","data","board","catch","error","console","handleInputChange","event","i","j","value","target","test","numValue","parseInt","newGrid","row","rowIndex","cell","cellIndex","isValidSudoku","newValidity","isValid","firstOccurrencesRows","firstOccurrencesCols","firstOccurrencesBoxes","val","originalPos","boxIndex","Math","floor","checkSudoku","alert","log","isEntireGridValid","every","className","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/sebastianwulf-andersen/Documents/Fagprojekt-/my-app/frontEnd/src/SudokuView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './SudokuView.css';\n\nfunction SudokuView() {\n  const [grid, setGrid] = useState([]);\n  const [validity, setValidity] = useState(Array(9).fill().map(() => Array(9).fill(true)));\n\n\n  useEffect(() => {\n    // Hent et nyt Sudoku bræt fra backenden\n    fetch('http://localhost:3000/generate')\n      .then(response => response.json())\n      .then(data => setGrid(data.board))\n      .catch(error => console.error('Error fetching data: ', error));\n  }, []);\n\n  const handleInputChange = (event, i, j) => {\n    const value = event.target.value;\n    // check om input er et tal mellem 1 og 9\n    if (value === '' || (/^\\d+$/.test(value) && value >= 1 && value <= 9)) {\n      const numValue = value === '' ? 0 : parseInt(value, 10); // konverter til tal\n\n      // lav en ny kopi af grid og opdater værdien på den valgte celle\n      const newGrid = grid.map((row, rowIndex) =>\n        row.map((cell, cellIndex) =>\n          rowIndex === i && cellIndex === j ? numValue : cell\n        )\n      );\n\n      setGrid(newGrid);\n      \n    }\n    //hvis input ikke er et tal mellem 1 og 9, så gør ingenting\n  };\n\n  const isValidSudoku = () => {\n    let newValidity = Array(9).fill().map(() => Array(9).fill(true)); \n    let isValid = true;\n  \n    // Track first occurrences of values in rows, columns, and boxes\n    let firstOccurrencesRows = Array(9).fill().map(() => ({}));\n    let firstOccurrencesCols = Array(9).fill().map(() => ({}));\n    let firstOccurrencesBoxes = Array(9).fill().map(() => ({}));\n  \n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        const val = grid[i][j];\n        if (val) {\n          // Check rows\n          if (val in firstOccurrencesRows[i]) {\n            // Mark both the original and the duplicate as invalid\n            newValidity[i][j] = false; \n            const originalPos = firstOccurrencesRows[i][val];\n            newValidity[originalPos[0]][originalPos[1]] = false; \n          } else {\n            firstOccurrencesRows[i][val] = [i, j]; \n          }\n  \n          // Check columns\n          if (val in firstOccurrencesCols[j]) {\n            // Mark both the original and the duplicate as invalid\n            newValidity[i][j] = false; \n            const originalPos = firstOccurrencesCols[j][val];\n            newValidity[originalPos[0]][originalPos[1]] = false; \n          } else {\n            firstOccurrencesCols[j][val] = [i, j]; \n          }\n  \n          // Calculate box index\n          const boxIndex = 3 * Math.floor(i / 3) + Math.floor(j / 3);\n          // Check boxes\n          if (val in firstOccurrencesBoxes[boxIndex]) {\n            // Mark both the original and the duplicate as invalid\n            newValidity[i][j] = false; \n            const originalPos = firstOccurrencesBoxes[boxIndex][val];\n            newValidity[originalPos[0]][originalPos[1]] = false; \n          } else {\n            firstOccurrencesBoxes[boxIndex][val] = [i, j]; \n          }\n        }\n      }\n    }\n  \n   \n    setValidity(newValidity);\n    \n    // Check if any cell is marked as invalid\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        if (!newValidity[i][j]) {\n          isValid = false;\n          break;\n        }\n      }\n      if (!isValid) break;\n    }\n  \n    return isValid;\n  };\n  // tjek om sudoku er valid\n  const checkSudoku = () => {\n    alert(isValidSudoku()); //vis alert med resultat\n  };\n\n  useEffect(() => {\n    // Perform actions that depend on the updated validity state here\n    console.log('Validity state updated', validity);\n  \n    // Example: Check if the entire grid is valid and do something\n    const isEntireGridValid = validity.every(row => row.every(cell => cell));\n    if (isEntireGridValid) {\n      console.log('The entire grid is valid!');\n      // Perform additional actions here\n    }\n  }, [validity]); \n\n  \n\n  return (\n    <div className=\"SudokuView\">\n      <table className=\"center\">\n        <tbody>\n          {grid.map((row, i) => (\n            <tr key={i}>\n              {row.map((value, j) => (\n                <td key={j} className={!validity[i][j] ? 'invalid' : ''}>\n                  <input\n                    type=\"text\"\n                    value={value === 0 ? '' : value}\n                    onChange={(event) => handleInputChange(event, i, j)}\n                  />\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n  \n      <button\n        className=\"button-blue\"\n        onClick={checkSudoku}>\n  \n          Check Sudoku\n        \n        </button>\n  \n    </div>\n  );\n}\n\nexport default SudokuView;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}