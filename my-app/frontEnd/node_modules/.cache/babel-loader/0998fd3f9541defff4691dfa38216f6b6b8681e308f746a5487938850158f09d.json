{"ast":null,"code":"export const fetchNewBoard = ({\n  setGrid,\n  setEditableCells,\n  setUserEdits,\n  setValidity,\n  setIsDataLoaded,\n  setTimer,\n  setIsTimerActive\n}) => {\n  fetch('http://localhost:3000/generate').then(response => response.json()).then(data => {\n    const boardSize = data.board.length; // Assuming the board is square and data.board is the sudoku board\n    setGrid(data.board);\n    const editable = data.board.map(row => row.map(value => value === 0));\n    // Adjust the initializations to match the board size\n    setEditableCells(editable);\n    setUserEdits(Array(boardSize).fill().map(() => Array(boardSize).fill(false)));\n    setValidity(Array(boardSize).fill().map(() => Array(boardSize).fill(true)));\n    setIsDataLoaded(true);\n    setTimer(0);\n    setIsTimerActive(true);\n  }).catch(error => {\n    console.error('Error fetching data: ', error);\n  });\n};","map":{"version":3,"names":["fetchNewBoard","setGrid","setEditableCells","setUserEdits","setValidity","setIsDataLoaded","setTimer","setIsTimerActive","fetch","then","response","json","data","boardSize","board","length","editable","map","row","value","Array","fill","catch","error","console"],"sources":["C:/Users/marti/OneDrive/Skrivebord/Fagprojekt/Fagprojekt-/my-app/frontEnd/src/fetchNewBoard.js"],"sourcesContent":["export const fetchNewBoard = ({\r\n  setGrid,\r\n  setEditableCells,\r\n  setUserEdits,\r\n  setValidity,\r\n  setIsDataLoaded,\r\n  setTimer,\r\n  setIsTimerActive\r\n}) => {\r\n  fetch('http://localhost:3000/generate')\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      const boardSize = data.board.length; // Assuming the board is square and data.board is the sudoku board\r\n      setGrid(data.board);\r\n      const editable = data.board.map(row => row.map(value => value === 0));\r\n      // Adjust the initializations to match the board size\r\n      setEditableCells(editable);\r\n      setUserEdits(Array(boardSize).fill().map(() => Array(boardSize).fill(false)));\r\n      setValidity(Array(boardSize).fill().map(() => Array(boardSize).fill(true)));\r\n      setIsDataLoaded(true);\r\n      setTimer(0);\r\n      setIsTimerActive(true);\r\n    })\r\n    .catch(error => {\r\n      console.error('Error fetching data: ', error);\r\n    });\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAGA,CAAC;EAC5BC,OAAO;EACPC,gBAAgB;EAChBC,YAAY;EACZC,WAAW;EACXC,eAAe;EACfC,QAAQ;EACRC;AACF,CAAC,KAAK;EACJC,KAAK,CAAC,gCAAgC,CAAC,CACpCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;IACZ,MAAMC,SAAS,GAAGD,IAAI,CAACE,KAAK,CAACC,MAAM,CAAC,CAAC;IACrCd,OAAO,CAACW,IAAI,CAACE,KAAK,CAAC;IACnB,MAAME,QAAQ,GAAGJ,IAAI,CAACE,KAAK,CAACG,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACD,GAAG,CAACE,KAAK,IAAIA,KAAK,KAAK,CAAC,CAAC,CAAC;IACrE;IACAjB,gBAAgB,CAACc,QAAQ,CAAC;IAC1Bb,YAAY,CAACiB,KAAK,CAACP,SAAS,CAAC,CAACQ,IAAI,CAAC,CAAC,CAACJ,GAAG,CAAC,MAAMG,KAAK,CAACP,SAAS,CAAC,CAACQ,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IAC7EjB,WAAW,CAACgB,KAAK,CAACP,SAAS,CAAC,CAACQ,IAAI,CAAC,CAAC,CAACJ,GAAG,CAAC,MAAMG,KAAK,CAACP,SAAS,CAAC,CAACQ,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3EhB,eAAe,CAAC,IAAI,CAAC;IACrBC,QAAQ,CAAC,CAAC,CAAC;IACXC,gBAAgB,CAAC,IAAI,CAAC;EACxB,CAAC,CAAC,CACDe,KAAK,CAACC,KAAK,IAAI;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;EAC/C,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}